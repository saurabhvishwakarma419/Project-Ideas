import React, { useState, useEffect } from 'react';
import { Lock, RefreshCw, Copy, Check, Shield, AlertTriangle, Eye, EyeOff, Zap, Key, Download, Settings } from 'lucide-react';

const PasswordGenerator = () => {
  const [password, setPassword] = useState('');
  const [settings, setSettings] = useState({
    length: 16,
    uppercase: true,
    lowercase: true,
    numbers: true,
    symbols: true,
    excludeSimilar: false,
    excludeAmbiguous: false,
    noSequential: false,
    mustIncludeAll: true
  });
  const [copied, setCopied] = useState(false);
  const [showPassword, setShowPassword] = useState(true);
  const [passwordHistory, setPasswordHistory] = useState([]);
  const [strength, setStrength] = useState({ score: 0, label: '', color: '' });

  // Character sets
  const charSets = {
    uppercase: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
    lowercase: 'abcdefghijklmnopqrstuvwxyz',
    numbers: '0123456789',
    symbols: '!@#$%^&*()_+-=[]{}|;:,.<>?'
  };

  const similarChars = 'il1Lo0O';
  const ambiguousChars = '{}[]()/\\\'"`~,;:.<>';

  // Generate password
  const generatePassword = () => {
    let chars = '';
    let generatedPassword = '';

    // Build character pool
    if (settings.uppercase) chars += charSets.uppercase;
    if (settings.lowercase) chars += charSets.lowercase;
    if (settings.numbers) chars += charSets.numbers;
    if (settings.symbols) chars += charSets.symbols;

    // Remove similar characters if enabled
    if (settings.excludeSimilar) {
      chars = chars.split('').filter(c => !similarChars.includes(c)).join('');
    }

    // Remove ambiguous characters if enabled
    if (settings.excludeAmbiguous) {
      chars = chars.split('').filter(c => !ambiguousChars.includes(c)).join('');
    }

    if (chars.length === 0) {
      chars = charSets.lowercase; // Fallback
    }

    // Generate random password
    const array = new Uint32Array(settings.length);
    crypto.getRandomValues(array);
    
    for (let i = 0; i < settings.length; i++) {
      generatedPassword += chars[array[i] % chars.length];
    }

    // Ensure all character types are included if required
    if (settings.mustIncludeAll) {
      const hasUppercase = settings.uppercase ? /[A-Z]/.test(generatedPassword) : true;
      const hasLowercase = settings.lowercase ? /[a-z]/.test(generatedPassword) : true;
      const hasNumbers = settings.numbers ? /[0-9]/.test(generatedPassword) : true;
      const hasSymbols = settings.symbols ? /[!@#$%^&*()_+\-=\[\]{}|;:,.<>?]/.test(generatedPassword) : true;

      if (!hasUppercase || !hasLowercase || !hasNumbers || !hasSymbols) {
        return generatePassword(); // Regenerate if requirements not met
      }
    }

    // Check for sequential characters if enabled
    if (settings.noSequential) {
      for (let i = 0; i < generatedPassword.length - 2; i++) {
        const char1 = generatedPassword.charCodeAt(i);
        const char2 = generatedPassword.charCodeAt(i + 1);
        const char3 = generatedPassword.charCodeAt(i + 2);
        
        if ((char2 === char1 + 1 && char3 === char2 + 1) || 
            (char2 === char1 - 1 && char3 === char2 - 1)) {
          return generatePassword(); // Regenerate if sequential found
        }
      }
    }

    setPassword(generatedPassword);
    calculateStrength(generatedPassword);
    return generatedPassword;
  };

  // Calculate password strength
  const calculateStrength = (pwd) => {
    let score = 0;
    let feedback = [];

    // Length scoring
    if (pwd.length >= 16) score += 30;
    else if (pwd.length >= 12) score += 20;
    else if (pwd.length >= 8) score += 10;
    else score += 5;

    // Character variety scoring
    if (/[a-z]/.test(pwd)) score += 15;
    if (/[A-Z]/.test(pwd)) score += 15;
    if (/[0-9]/.test(pwd)) score += 15;
    if (/[^a-zA-Z0-9]/.test(pwd)) score += 20;

    // Bonus for mixing character types
    const types = [/[a-z]/, /[A-Z]/, /[0-9]/, /[^a-zA-Z0-9]/].filter(regex => regex.test(pwd)).length;
    if (types === 4) score += 10;

    // Entropy bonus
    const uniqueChars = new Set(pwd.split('')).size;
    if (uniqueChars > pwd.length * 0.7) score += 5;

    // Determine strength label
    let label = '';
    let color = '';
    
    if (score >= 85) {
      label = 'Very Strong';
      color = 'from-green-500 to-emerald-500';
    } else if (score >= 70) {
      label = 'Strong';
      color = 'from-blue-500 to-cyan-500';
    } else if (score >= 50) {
      label = 'Moderate';
      color = 'from-yellow-500 to-orange-500';
    } else if (score >= 30) {
      label = 'Weak';
      color = 'from-orange-500 to-red-500';
    } else {
      label = 'Very Weak';
      color = 'from-red-500 to-red-700';
    }

    setStrength({ score: Math.min(100, score), label, color });
  };

  // Copy to clipboard
  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(password);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  // Save to history
  const saveToHistory = () => {
    if (password && !passwordHistory.includes(password)) {
      setPasswordHistory(prev => [password, ...prev].slice(0, 10));
    }
  };

  // Download passwords
  const downloadPasswords = () => {
    const content = passwordHistory.join('\n');
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'passwords.txt';
    a.click();
    URL.revokeObjectURL(url);
  };

  // Update setting
  const updateSetting = (key, value) => {
    setSettings(prev => ({ ...prev, [key]: value }));
  };

  // Generate on mount and when settings change
  useEffect(() => {
    generatePassword();
  }, [settings]);

  useEffect(() => {
    if (password) {
      saveToHistory();
    }
  }, [password]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-indigo-900 to-purple-900 p-4">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 mb-6 border border-white/20">
          <div className="flex items-center gap-3 mb-2">
            <Shield className="w-8 h-8 text-indigo-400" />
            <h1 className="text-3xl font-bold text-white">Password Generator</h1>
          </div>
          <p className="text-indigo-200">Generate cryptographically secure, random passwords</p>
        </div>

        {/* Password Display */}
        <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 mb-6 border border-white/20">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-white font-semibold flex items-center gap-2">
              <Key className="w-5 h-5" />
              Generated Password
            </h3>
            <button
              onClick={() => setShowPassword(!showPassword)}
              className="text-white/60 hover:text-white transition-colors"
            >
              {showPassword ? <Eye className="w-5 h-5" /> : <EyeOff className="w-5 h-5" />}
            </button>
          </div>

          <div className="bg-black/30 rounded-lg p-4 mb-4 font-mono text-xl text-center break-all border border-white/10">
            {password ? (
              <span className={`text-white ${!showPassword ? 'blur-sm select-none' : ''}`}>
                {password}
              </span>
            ) : (
              <span className="text-gray-500">Click generate to create a password</span>
            )}
          </div>

          {/* Strength Meter */}
          {password && (
            <div className="mb-4">
              <div className="flex justify-between items-center mb-2">
                <span className="text-sm text-gray-300">Password Strength</span>
                <span className="text-sm font-semibold text-white">{strength.label}</span>
              </div>
              <div className="bg-white/10 rounded-full h-3 overflow-hidden">
                <div 
                  className={`h-full bg-gradient-to-r ${strength.color} transition-all duration-500`}
                  style={{ width: `${strength.score}%` }}
                />
              </div>
            </div>
          )}

          {/* Action Buttons */}
          <div className="flex gap-3">
            <button
              onClick={generatePassword}
              className="flex-1 bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white py-3 px-4 rounded-lg transition-all flex items-center justify-center gap-2 font-semibold"
            >
              <RefreshCw className="w-5 h-5" />
              Generate New
            </button>
            <button
              onClick={copyToClipboard}
              disabled={!password}
              className={`flex-1 ${
                copied 
                  ? 'bg-green-600' 
                  : 'bg-white/10 hover:bg-white/20'
              } text-white py-3 px-4 rounded-lg transition-all flex items-center justify-center gap-2 font-semibold disabled:opacity-50 disabled:cursor-not-allowed`}
            >
              {copied ? (
                <>
                  <Check className="w-5 h-5" />
                  Copied!
                </>
              ) : (
                <>
                  <Copy className="w-5 h-5" />
                  Copy
                </>
              )}
            </button>
          </div>
        </div>

        {/* Settings */}
        <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 mb-6 border border-white/20">
          <h3 className="text-white font-semibold mb-4 flex items-center gap-2">
            <Settings className="w-5 h-5" />
            Password Settings
          </h3>

          {/* Length Slider */}
          <div className="mb-6">
            <div className="flex justify-between items-center mb-2">
              <label className="text-white text-sm">Password Length</label>
              <span className="text-indigo-300 font-bold text-lg">{settings.length}</span>
            </div>
            <input
              type="range"
              min="4"
              max="128"
              value={settings.length}
              onChange={(e) => updateSetting('length', parseInt(e.target.value))}
              className="w-full h-2 bg-white/20 rounded-lg appearance-none cursor-pointer accent-indigo-600"
            />
            <div className="flex justify-between text-xs text-gray-400 mt-1">
              <span>4</span>
              <span>32</span>
              <span>64</span>
              <span>128</span>
            </div>
          </div>

          {/* Character Type Toggles */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <label className="flex items-center justify-between bg-white/5 p-3 rounded-lg cursor-pointer hover:bg-white/10 transition-colors">
              <span className="text-white">Uppercase (A-Z)</span>
              <input
                type="checkbox"
                checked={settings.uppercase}
                onChange={(e) => updateSetting('uppercase', e.target.checked)}
                className="w-5 h-5 accent-indigo-600"
              />
            </label>

            <label className="flex items-center justify-between bg-white/5 p-3 rounded-lg cursor-pointer hover:bg-white/10 transition-colors">
              <span className="text-white">Lowercase (a-z)</span>
              <input
                type="checkbox"
                checked={settings.lowercase}
                onChange={(e) => updateSetting('lowercase', e.target.checked)}
                className="w-5 h-5 accent-indigo-600"
              />
            </label>

            <label className="flex items-center justify-between bg-white/5 p-3 rounded-lg cursor-pointer hover:bg-white/10 transition-colors">
              <span className="text-white">Numbers (0-9)</span>
              <input
                type="checkbox"
                checked={settings.numbers}
                onChange={(e) => updateSetting('numbers', e.target.checked)}
                className="w-5 h-5 accent-indigo-600"
              />
            </label>

            <label className="flex items-center justify-between bg-white/5 p-3 rounded-lg cursor-pointer hover:bg-white/10 transition-colors">
              <span className="text-white">Symbols (!@#$...)</span>
              <input
                type="checkbox"
                checked={settings.symbols}
                onChange={(e) => updateSetting('symbols', e.target.checked)}
                className="w-5 h-5 accent-indigo-600"
              />
            </label>
          </div>

          {/* Advanced Options */}
          <div className="border-t border-white/10 pt-4">
            <h4 className="text-white text-sm font-semibold mb-3">Advanced Options</h4>
            <div className="grid grid-cols-1 gap-3">
              <label className="flex items-center justify-between bg-white/5 p-3 rounded-lg cursor-pointer hover:bg-white/10 transition-colors">
                <div>
                  <div className="text-white text-sm">Exclude Similar Characters</div>
                  <div className="text-gray-400 text-xs">Avoids: i, l, 1, L, o, 0, O</div>
                </div>
                <input
                  type="checkbox"
                  checked={settings.excludeSimilar}
                  onChange={(e) => updateSetting('excludeSimilar', e.target.checked)}
                  className="w-5 h-5 accent-indigo-600"
                />
              </label>

              <label className="flex items-center justify-between bg-white/5 p-3 rounded-lg cursor-pointer hover:bg-white/10 transition-colors">
                <div>
                  <div className="text-white text-sm">Exclude Ambiguous Symbols</div>
                  <div className="text-gray-400 text-xs">Avoids: {`{}, [], (), /, \\, ', ", etc.`}</div>
                </div>
                <input
                  type="checkbox"
                  checked={settings.excludeAmbiguous}
                  onChange={(e) => updateSetting('excludeAmbiguous', e.target.checked)}
                  className="w-5 h-5 accent-indigo-600"
                />
              </label>

              <label className="flex items-center justify-between bg-white/5 p-3 rounded-lg cursor-pointer hover:bg-white/10 transition-colors">
                <div>
                  <div className="text-white text-sm">No Sequential Characters</div>
                  <div className="text-gray-400 text-xs">Avoids: abc, 123, xyz, etc.</div>
                </div>
                <input
                  type="checkbox"
                  checked={settings.noSequential}
                  onChange={(e) => updateSetting('noSequential', e.target.checked)}
                  className="w-5 h-5 accent-indigo-600"
                />
              </label>

              <label className="flex items-center justify-between bg-white/5 p-3 rounded-lg cursor-pointer hover:bg-white/10 transition-colors">
                <div>
                  <div className="text-white text-sm">Must Include All Selected Types</div>
                  <div className="text-gray-400 text-xs">Ensures at least one of each enabled type</div>
                </div>
                <input
                  type="checkbox"
                  checked={settings.mustIncludeAll}
                  onChange={(e) => updateSetting('mustIncludeAll', e.target.checked)}
                  className="w-5 h-5 accent-indigo-600"
                />
              </label>
            </div>
          </div>
        </div>

        {/* Password History */}
        {passwordHistory.length > 0 && (
          <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-white font-semibold flex items-center gap-2">
                <Zap className="w-5 h-5" />
                Recent Passwords
              </h3>
              <button
                onClick={downloadPasswords}
                className="text-indigo-300 hover:text-indigo-200 transition-colors flex items-center gap-2 text-sm"
              >
                <Download className="w-4 h-4" />
                Download All
              </button>
            </div>
            <div className="space-y-2 max-h-64 overflow-y-auto">
              {passwordHistory.map((pwd, idx) => (
                <div
                  key={idx}
                  className="bg-black/30 rounded-lg p-3 font-mono text-sm text-white break-all hover:bg-black/40 transition-colors cursor-pointer group"
                  onClick={() => {
                    navigator.clipboard.writeText(pwd);
                    setCopied(true);
                    setTimeout(() => setCopied(false), 2000);
                  }}
                >
                  <div className="flex items-center justify-between gap-2">
                    <span className="flex-1">{pwd}</span>
                    <Copy className="w-4 h-4 text-gray-400 group-hover:text-white transition-colors flex-shrink-0" />
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Security Tips */}
        <div className="mt-6 bg-gradient-to-r from-yellow-500/10 to-orange-500/10 backdrop-blur-lg rounded-xl p-6 border border-yellow-400/30">
          <div className="flex items-start gap-3">
            <AlertTriangle className="w-6 h-6 text-yellow-400 flex-shrink-0 mt-1" />
            <div>
              <h3 className="text-lg font-semibold text-white mb-2">Security Best Practices</h3>
              <ul className="text-sm text-gray-200 space-y-1">
                <li>• Use unique passwords for each account</li>
                <li>• Enable two-factor authentication whenever possible</li>
                <li>• Use a password manager to store passwords securely</li>
                <li>• Never share passwords via email or messaging</li>
                <li>• Change passwords regularly, especially for sensitive accounts</li>
                <li>• Avoid using personal information in passwords</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PasswordGenerator;
