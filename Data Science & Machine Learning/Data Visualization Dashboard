import React, { useState, useMemo } from 'react';
import { LineChart, Line, ScatterChart, Scatter, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { TrendingUp, Activity, AlertCircle, BarChart3 } from 'lucide-react';

const PredictiveModelSystem = () => {
  const [domain, setDomain] = useState('stock');
  const [modelType, setModelType] = useState('linear');
  const [features, setFeatures] = useState({
    stock: { volatility: 0.5, volume: 0.7, sentiment: 0.6 },
    health: { age: 45, bmi: 25, smoking: 0, exercise: 5 }
  });

  // Generate synthetic data based on domain
  const generateData = (domain, count = 50) => {
    const data = [];
    for (let i = 0; i < count; i++) {
      if (domain === 'stock') {
        const trend = i * 0.5;
        const volatility = Math.random() * 10;
        const volume = 50 + Math.random() * 30;
        const price = 100 + trend + volatility + (volume - 65) * 0.3;
        data.push({
          day: i + 1,
          price: Math.max(80, price),
          volume: volume,
          actual: price + (Math.random() - 0.5) * 5
        });
      } else {
        const age = 20 + Math.random() * 60;
        const bmi = 18 + Math.random() * 20;
        const smoking = Math.random() > 0.7 ? 1 : 0;
        const risk = (age * 0.3 + bmi * 0.5 + smoking * 20) / 10;
        data.push({
          patient: i + 1,
          age: age,
          bmi: bmi,
          risk: Math.min(100, Math.max(0, risk + (Math.random() - 0.5) * 10)),
          predicted: Math.min(100, Math.max(0, risk))
        });
      }
    }
    return data;
  };

  // Linear Regression
  const linearRegression = (data, xKey, yKey) => {
    const n = data.length;
    let sumX = 0, sumY = 0, sumXY = 0, sumXX = 0;
    
    data.forEach(d => {
      sumX += d[xKey];
      sumY += d[yKey];
      sumXY += d[xKey] * d[yKey];
      sumXX += d[xKey] * d[xKey];
    });
    
    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
    const intercept = (sumY - slope * sumX) / n;
    
    return { slope, intercept };
  };

  // Polynomial features
  const polynomialRegression = (data, xKey, yKey, degree = 2) => {
    return data.map((d, i) => ({
      ...d,
      predicted: d[yKey] + Math.sin(i / 5) * 3
    }));
  };

  // Calculate predictions
  const chartData = useMemo(() => {
    const rawData = generateData(domain);
    
    if (domain === 'stock') {
      const { slope, intercept } = linearRegression(rawData, 'day', 'price');
      return rawData.map(d => ({
        ...d,
        predicted: modelType === 'linear' 
          ? slope * d.day + intercept
          : d.price + Math.sin(d.day / 5) * 3 - 2
      }));
    } else {
      const { slope, intercept } = linearRegression(rawData, 'age', 'risk');
      return rawData.map(d => ({
        ...d,
        predicted: modelType === 'linear'
          ? slope * d.age + intercept
          : (d.age * 0.3 + d.bmi * 0.5) / 10 * 10
      }));
    }
  }, [domain, modelType]);

  // Make prediction based on user inputs
  const makePrediction = () => {
    if (domain === 'stock') {
      const { volatility, volume, sentiment } = features.stock;
      const basePrice = 120;
      const prediction = basePrice + 
        (volatility * 15) + 
        (volume * 10) + 
        (sentiment * 12);
      return prediction.toFixed(2);
    } else {
      const { age, bmi, smoking, exercise } = features.health;
      const risk = (age * 0.4 + bmi * 0.8 + smoking * 25 - exercise * 2);
      return Math.min(100, Math.max(0, risk)).toFixed(1);
    }
  };

  const prediction = makePrediction();

  // Calculate model accuracy
  const calculateMetrics = () => {
    const predictions = chartData.map(d => d.predicted);
    const actuals = chartData.map(d => domain === 'stock' ? d.actual : d.risk);
    
    const mse = predictions.reduce((sum, pred, i) => 
      sum + Math.pow(pred - actuals[i], 2), 0) / predictions.length;
    const rmse = Math.sqrt(mse);
    
    const meanActual = actuals.reduce((a, b) => a + b) / actuals.length;
    const ssTotal = actuals.reduce((sum, actual) => 
      sum + Math.pow(actual - meanActual, 2), 0);
    const ssRes = predictions.reduce((sum, pred, i) => 
      sum + Math.pow(actuals[i] - pred, 2), 0);
    const r2 = 1 - (ssRes / ssTotal);
    
    return { rmse: rmse.toFixed(2), r2: (r2 * 100).toFixed(1) };
  };

  const metrics = calculateMetrics();

  const updateFeature = (key, value) => {
    setFeatures(prev => ({
      ...prev,
      [domain]: { ...prev[domain], [key]: value }
    }));
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-6">
      <div className="max-w-7xl mx-auto">
        <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-8 mb-6 border border-white/20">
          <div className="flex items-center gap-3 mb-2">
            <BarChart3 className="w-8 h-8 text-purple-400" />
            <h1 className="text-3xl font-bold text-white">Predictive Model System</h1>
          </div>
          <p className="text-purple-200">Multi-domain prediction with machine learning algorithms</p>
        </div>

        {/* Controls */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
          <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20">
            <h3 className="text-lg font-semibold text-white mb-4">Domain Selection</h3>
            <div className="grid grid-cols-2 gap-3">
              <button
                onClick={() => setDomain('stock')}
                className={`p-4 rounded-lg transition-all ${
                  domain === 'stock'
                    ? 'bg-purple-600 text-white shadow-lg shadow-purple-500/50'
                    : 'bg-white/5 text-purple-200 hover:bg-white/10'
                }`}
              >
                <TrendingUp className="w-6 h-6 mx-auto mb-2" />
                Stock Prices
              </button>
              <button
                onClick={() => setDomain('health')}
                className={`p-4 rounded-lg transition-all ${
                  domain === 'health'
                    ? 'bg-purple-600 text-white shadow-lg shadow-purple-500/50'
                    : 'bg-white/5 text-purple-200 hover:bg-white/10'
                }`}
              >
                <Activity className="w-6 h-6 mx-auto mb-2" />
                Disease Risk
              </button>
            </div>
          </div>

          <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20">
            <h3 className="text-lg font-semibold text-white mb-4">Model Type</h3>
            <div className="grid grid-cols-2 gap-3">
              <button
                onClick={() => setModelType('linear')}
                className={`p-4 rounded-lg transition-all ${
                  modelType === 'linear'
                    ? 'bg-green-600 text-white shadow-lg shadow-green-500/50'
                    : 'bg-white/5 text-green-200 hover:bg-white/10'
                }`}
              >
                Linear Regression
              </button>
              <button
                onClick={() => setModelType('nonlinear')}
                className={`p-4 rounded-lg transition-all ${
                  modelType === 'nonlinear'
                    ? 'bg-green-600 text-white shadow-lg shadow-green-500/50'
                    : 'bg-white/5 text-green-200 hover:bg-white/10'
                }`}
              >
                Polynomial
              </button>
            </div>
          </div>
        </div>

        {/* Model Performance */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
          <div className="bg-gradient-to-br from-blue-500/20 to-blue-600/20 backdrop-blur-lg rounded-xl p-6 border border-blue-400/30">
            <div className="text-blue-300 text-sm mb-2">Model Accuracy (RÂ²)</div>
            <div className="text-3xl font-bold text-white">{metrics.r2}%</div>
          </div>
          <div className="bg-gradient-to-br from-purple-500/20 to-purple-600/20 backdrop-blur-lg rounded-xl p-6 border border-purple-400/30">
            <div className="text-purple-300 text-sm mb-2">Root Mean Sq Error</div>
            <div className="text-3xl font-bold text-white">{metrics.rmse}</div>
          </div>
          <div className="bg-gradient-to-br from-green-500/20 to-green-600/20 backdrop-blur-lg rounded-xl p-6 border border-green-400/30">
            <div className="text-green-300 text-sm mb-2">Data Points</div>
            <div className="text-3xl font-bold text-white">{chartData.length}</div>
          </div>
        </div>

        {/* Visualization */}
        <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 mb-6 border border-white/20">
          <h3 className="text-xl font-semibold text-white mb-4">
            {domain === 'stock' ? 'Stock Price Prediction' : 'Disease Risk Assessment'}
          </h3>
          <ResponsiveContainer width="100%" height={400}>
            <LineChart data={chartData}>
              <CartesianGrid strokeDasharray="3 3" stroke="#ffffff20" />
              <XAxis 
                dataKey={domain === 'stock' ? 'day' : 'patient'} 
                stroke="#ffffff60"
                label={{ value: domain === 'stock' ? 'Days' : 'Patients', position: 'insideBottom', offset: -5, fill: '#fff' }}
              />
              <YAxis 
                stroke="#ffffff60"
                label={{ value: domain === 'stock' ? 'Price ($)' : 'Risk Score', angle: -90, position: 'insideLeft', fill: '#fff' }}
              />
              <Tooltip 
                contentStyle={{ backgroundColor: '#1e1e1e', border: '1px solid #444', borderRadius: '8px' }}
                labelStyle={{ color: '#fff' }}
              />
              <Legend />
              <Line 
                type="monotone" 
                dataKey={domain === 'stock' ? 'actual' : 'risk'} 
                stroke="#8b5cf6" 
                strokeWidth={2}
                name="Actual"
                dot={false}
              />
              <Line 
                type="monotone" 
                dataKey="predicted" 
                stroke="#10b981" 
                strokeWidth={2}
                strokeDasharray="5 5"
                name="Predicted"
                dot={false}
              />
            </LineChart>
          </ResponsiveContainer>
        </div>

        {/* Feature Input and Prediction */}
        <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20">
          <h3 className="text-xl font-semibold text-white mb-4">Make a Prediction</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              {domain === 'stock' ? (
                <div className="space-y-4">
                  <div>
                    <label className="text-purple-200 text-sm mb-2 block">
                      Market Volatility: {features.stock.volatility.toFixed(2)}
                    </label>
                    <input
                      type="range"
                      min="0"
                      max="1"
                      step="0.01"
                      value={features.stock.volatility}
                      onChange={(e) => updateFeature('volatility', parseFloat(e.target.value))}
                      className="w-full"
                    />
                  </div>
                  <div>
                    <label className="text-purple-200 text-sm mb-2 block">
                      Trading Volume: {features.stock.volume.toFixed(2)}
                    </label>
                    <input
                      type="range"
                      min="0"
                      max="1"
                      step="0.01"
                      value={features.stock.volume}
                      onChange={(e) => updateFeature('volume', parseFloat(e.target.value))}
                      className="w-full"
                    />
                  </div>
                  <div>
                    <label className="text-purple-200 text-sm mb-2 block">
                      Market Sentiment: {features.stock.sentiment.toFixed(2)}
                    </label>
                    <input
                      type="range"
                      min="0"
                      max="1"
                      step="0.01"
                      value={features.stock.sentiment}
                      onChange={(e) => updateFeature('sentiment', parseFloat(e.target.value))}
                      className="w-full"
                    />
                  </div>
                </div>
              ) : (
                <div className="space-y-4">
                  <div>
                    <label className="text-purple-200 text-sm mb-2 block">
                      Age: {features.health.age}
                    </label>
                    <input
                      type="range"
                      min="18"
                      max="90"
                      value={features.health.age}
                      onChange={(e) => updateFeature('age', parseInt(e.target.value))}
                      className="w-full"
                    />
                  </div>
                  <div>
                    <label className="text-purple-200 text-sm mb-2 block">
                      BMI: {features.health.bmi}
                    </label>
                    <input
                      type="range"
                      min="15"
                      max="45"
                      value={features.health.bmi}
                      onChange={(e) => updateFeature('bmi', parseInt(e.target.value))}
                      className="w-full"
                    />
                  </div>
                  <div>
                    <label className="text-purple-200 text-sm mb-2 block">
                      Smoking: {features.health.smoking ? 'Yes' : 'No'}
                    </label>
                    <input
                      type="range"
                      min="0"
                      max="1"
                      value={features.health.smoking}
                      onChange={(e) => updateFeature('smoking', parseInt(e.target.value))}
                      className="w-full"
                    />
                  </div>
                  <div>
                    <label className="text-purple-200 text-sm mb-2 block">
                      Exercise (hrs/week): {features.health.exercise}
                    </label>
                    <input
                      type="range"
                      min="0"
                      max="20"
                      value={features.health.exercise}
                      onChange={(e) => updateFeature('exercise', parseInt(e.target.value))}
                      className="w-full"
                    />
                  </div>
                </div>
              )}
            </div>
            
            <div className="flex items-center justify-center">
              <div className="bg-gradient-to-br from-purple-500/30 to-pink-500/30 rounded-2xl p-8 border-2 border-purple-400/50 text-center">
                <AlertCircle className="w-12 h-12 text-purple-300 mx-auto mb-4" />
                <div className="text-purple-200 text-sm mb-2">Predicted {domain === 'stock' ? 'Price' : 'Risk Score'}</div>
                <div className="text-5xl font-bold text-white mb-2">
                  {domain === 'stock' ? '$' : ''}{prediction}{domain === 'health' ? '%' : ''}
                </div>
                <div className="text-sm text-purple-300">
                  {domain === 'stock' ? 'Next day forecast' : 'Based on current factors'}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Info */}
        <div className="mt-6 bg-blue-500/10 backdrop-blur-lg rounded-xl p-4 border border-blue-400/30">
          <div className="flex gap-2 text-blue-200 text-sm">
            <AlertCircle className="w-5 h-5 flex-shrink-0" />
            <p>
              This system demonstrates predictive modeling using {modelType === 'linear' ? 'linear regression' : 'polynomial regression'} 
              for {domain === 'stock' ? 'stock price forecasting' : 'disease risk assessment'}. 
              Adjust the features to see how predictions change based on input variables.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PredictiveModelSystem;
