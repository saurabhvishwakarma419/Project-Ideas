
import React, { useState, useMemo } from 'react';
import { Smile, Frown, Meh, TrendingUp, MessageSquare, BarChart3, PieChart, AlertCircle, Sparkles, Hash, Eye, ThumbsUp, ThumbsDown } from 'lucide-react';
import { BarChart, Bar, PieChart as RPieChart, Pie, Cell, LineChart, Line, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

const SentimentAnalysisTool = () => {
  const [text, setText] = useState('');
  const [analysisMode, setAnalysisMode] = useState('single');
  const [batchTexts, setBatchTexts] = useState([
    { id: 1, text: 'This product exceeded my expectations! Absolutely love it!', source: 'Product Review' },
    { id: 2, text: 'Terrible experience. Would not recommend to anyone.', source: 'Customer Feedback' },
    { id: 3, text: 'It\'s okay, nothing special but gets the job done.', source: 'Product Review' },
    { id: 4, text: 'Amazing service! The team was incredibly helpful and responsive.', source: 'Service Review' },
    { id: 5, text: 'Disappointed with the quality. Expected much better.', source: 'Product Review' },
  ]);

  // Sentiment lexicons
  const sentimentWords = {
    positive: [
      'excellent', 'amazing', 'wonderful', 'fantastic', 'great', 'love', 'best', 
      'awesome', 'perfect', 'beautiful', 'outstanding', 'brilliant', 'superb',
      'incredible', 'fabulous', 'delightful', 'exceptional', 'magnificent',
      'happy', 'joy', 'pleased', 'satisfied', 'excited', 'thrilled', 'good',
      'helpful', 'recommend', 'exceeded', 'impressive', 'responsive'
    ],
    negative: [
      'terrible', 'awful', 'horrible', 'bad', 'worst', 'hate', 'disappointing',
      'poor', 'useless', 'broken', 'defective', 'frustrating', 'annoying',
      'pathetic', 'disgusting', 'dreadful', 'inferior', 'unacceptable',
      'angry', 'upset', 'disappointed', 'unhappy', 'dissatisfied', 'terrible',
      'waste', 'avoid', 'never', 'regret', 'failed', 'problem'
    ],
    intensifiers: ['very', 'extremely', 'absolutely', 'completely', 'totally', 'really', 'so', 'incredibly'],
    negations: ['not', 'no', 'never', 'neither', 'nobody', 'nothing', 'nowhere', "don't", "doesn't", "didn't", "won't", "wouldn't", "can't", "couldn't"]
  };

  // Advanced sentiment analysis algorithm
  const analyzeSentiment = (inputText) => {
    const text = inputText.toLowerCase();
    const words = text.split(/\s+/);
    
    let positiveScore = 0;
    let negativeScore = 0;
    let intensifier = 1;
    let negation = false;
    
    const detectedEmotions = {
      joy: 0,
      anger: 0,
      sadness: 0,
      fear: 0,
      surprise: 0,
      trust: 0
    };

    const emotionWords = {
      joy: ['happy', 'joy', 'excited', 'thrilled', 'delighted', 'pleased', 'love', 'wonderful'],
      anger: ['angry', 'furious', 'hate', 'annoyed', 'irritated', 'frustrated', 'mad'],
      sadness: ['sad', 'disappointed', 'unhappy', 'depressed', 'miserable', 'regret'],
      fear: ['afraid', 'scared', 'worried', 'anxious', 'nervous', 'concerned'],
      surprise: ['surprised', 'amazed', 'astonished', 'shocked', 'unexpected'],
      trust: ['trust', 'reliable', 'confident', 'dependable', 'recommend', 'helpful']
    };

    words.forEach((word, idx) => {
      // Check for intensifiers
      if (sentimentWords.intensifiers.includes(word)) {
        intensifier = 1.5;
        return;
      }

      // Check for negations
      if (sentimentWords.negations.includes(word)) {
        negation = true;
        return;
      }

      // Calculate sentiment scores
      if (sentimentWords.positive.includes(word)) {
        const score = intensifier;
        if (negation) {
          negativeScore += score;
          negation = false;
        } else {
          positiveScore += score;
        }
        intensifier = 1;
      } else if (sentimentWords.negative.includes(word)) {
        const score = intensifier;
        if (negation) {
          positiveScore += score;
          negation = false;
        } else {
          negativeScore += score;
        }
        intensifier = 1;
      }

      // Detect emotions
      Object.keys(emotionWords).forEach(emotion => {
        if (emotionWords[emotion].includes(word)) {
          detectedEmotions[emotion] += 1;
        }
      });

      // Reset negation after 3 words
      if (idx > 0 && negation && idx % 3 === 0) {
        negation = false;
      }
    });

    // Calculate overall sentiment
    const totalScore = positiveScore + negativeScore;
    const sentimentScore = totalScore === 0 ? 0 : ((positiveScore - negativeScore) / totalScore);
    
    let sentiment = 'neutral';
    let confidence = 50;
    
    if (sentimentScore > 0.2) {
      sentiment = 'positive';
      confidence = Math.min(95, 50 + (sentimentScore * 100));
    } else if (sentimentScore < -0.2) {
      sentiment = 'negative';
      confidence = Math.min(95, 50 + (Math.abs(sentimentScore) * 100));
    } else {
      confidence = 50 + (Math.abs(sentimentScore) * 50);
    }

    // Find dominant emotion
    const dominantEmotion = Object.entries(detectedEmotions)
      .sort(([, a], [, b]) => b - a)[0];

    return {
      sentiment,
      score: sentimentScore,
      confidence: Math.round(confidence),
      positiveScore: positiveScore.toFixed(2),
      negativeScore: negativeScore.toFixed(2),
      emotions: detectedEmotions,
      dominantEmotion: dominantEmotion[1] > 0 ? dominantEmotion[0] : 'neutral',
      wordCount: words.length,
      polarityScore: ((sentimentScore + 1) / 2 * 100).toFixed(1)
    };
  };

  // Single text analysis
  const currentAnalysis = useMemo(() => {
    if (!text.trim()) return null;
    return analyzeSentiment(text);
  }, [text]);

  // Batch analysis
  const batchAnalysis = useMemo(() => {
    return batchTexts.map(item => ({
      ...item,
      analysis: analyzeSentiment(item.text)
    }));
  }, [batchTexts]);

  // Aggregate statistics
  const aggregateStats = useMemo(() => {
    const sentiments = batchAnalysis.map(b => b.analysis.sentiment);
    const positive = sentiments.filter(s => s === 'positive').length;
    const negative = sentiments.filter(s => s === 'negative').length;
    const neutral = sentiments.filter(s => s === 'neutral').length;
    
    const avgScore = batchAnalysis.reduce((sum, b) => sum + b.analysis.score, 0) / batchAnalysis.length;
    
    return {
      positive,
      negative,
      neutral,
      total: batchAnalysis.length,
      avgScore: avgScore.toFixed(2),
      positivePercentage: ((positive / batchAnalysis.length) * 100).toFixed(1),
      negativePercentage: ((negative / batchAnalysis.length) * 100).toFixed(1),
      neutralPercentage: ((neutral / batchAnalysis.length) * 100).toFixed(1)
    };
  }, [batchAnalysis]);

  const getSentimentIcon = (sentiment) => {
    if (sentiment === 'positive') return <Smile className="w-5 h-5 text-green-400" />;
    if (sentiment === 'negative') return <Frown className="w-5 h-5 text-red-400" />;
    return <Meh className="w-5 h-5 text-yellow-400" />;
  };

  const getSentimentColor = (sentiment) => {
    if (sentiment === 'positive') return 'from-green-500/20 to-green-600/20 border-green-400/30';
    if (sentiment === 'negative') return 'from-red-500/20 to-red-600/20 border-red-400/30';
    return 'from-yellow-500/20 to-yellow-600/20 border-yellow-400/30';
  };

  const COLORS = {
    positive: '#10b981',
    negative: '#ef4444',
    neutral: '#f59e0b'
  };

  const pieData = [
    { name: 'Positive', value: aggregateStats.positive, color: COLORS.positive },
    { name: 'Negative', value: aggregateStats.negative, color: COLORS.negative },
    { name: 'Neutral', value: aggregateStats.neutral, color: COLORS.neutral }
  ];

  const emotionData = currentAnalysis ? Object.entries(currentAnalysis.emotions).map(([name, value]) => ({
    emotion: name.charAt(0).toUpperCase() + name.slice(1),
    value: value
  })) : [];

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 p-4">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 mb-6 border border-white/20">
          <div className="flex items-center gap-3 mb-2">
            <MessageSquare className="w-8 h-8 text-blue-400" />
            <h1 className="text-3xl font-bold text-white">Sentiment Analysis Tool</h1>
          </div>
          <p className="text-blue-200">AI-powered emotional tone detection and text analysis</p>
        </div>

        {/* Mode Selector */}
        <div className="bg-white/10 backdrop-blur-lg rounded-xl p-2 mb-6 border border-white/20 flex gap-2">
          <button
            onClick={() => setAnalysisMode('single')}
            className={`flex-1 py-3 px-4 rounded-lg transition-all flex items-center justify-center gap-2 ${
              analysisMode === 'single' ? 'bg-blue-600 text-white' : 'text-blue-200 hover:bg-white/5'
            }`}
          >
            <MessageSquare className="w-5 h-5" />
            Single Text Analysis
          </button>
          <button
            onClick={() => setAnalysisMode('batch')}
            className={`flex-1 py-3 px-4 rounded-lg transition-all flex items-center justify-center gap-2 ${
              analysisMode === 'batch' ? 'bg-blue-600 text-white' : 'text-blue-200 hover:bg-white/5'
            }`}
          >
            <BarChart3 className="w-5 h-5" />
            Batch Analysis
          </button>
        </div>

        {analysisMode === 'single' ? (
          <>
            {/* Text Input */}
            <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 mb-6 border border-white/20">
              <h3 className="text-white font-semibold mb-4 flex items-center gap-2">
                <Eye className="w-5 h-5" />
                Enter Text to Analyze
              </h3>
              <textarea
                value={text}
                onChange={(e) => setText(e.target.value)}
                placeholder="Type or paste text here to analyze sentiment... (e.g., product reviews, customer feedback, social media posts)"
                className="w-full h-32 bg-white/5 border border-white/20 rounded-lg p-4 text-white placeholder-gray-400 focus:outline-none focus:border-blue-400 resize-none"
              />
              <div className="mt-2 text-sm text-gray-400">
                {text.length} characters • {text.split(/\s+/).filter(w => w).length} words
              </div>
            </div>

            {currentAnalysis && (
              <>
                {/* Main Sentiment Result */}
                <div className={`bg-gradient-to-br ${getSentimentColor(currentAnalysis.sentiment)} backdrop-blur-lg rounded-xl p-8 mb-6 border`}>
                  <div className="text-center">
                    <div className="flex items-center justify-center gap-3 mb-4">
                      {getSentimentIcon(currentAnalysis.sentiment)}
                      <h2 className="text-3xl font-bold text-white capitalize">
                        {currentAnalysis.sentiment} Sentiment
                      </h2>
                    </div>
                    <div className="text-6xl font-bold text-white mb-2">
                      {currentAnalysis.confidence}%
                    </div>
                    <div className="text-lg text-white/80">Confidence Score</div>
                  </div>
                </div>

                {/* Detailed Metrics */}
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                  <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20">
                    <div className="flex items-center gap-2 mb-2">
                      <ThumbsUp className="w-5 h-5 text-green-400" />
                      <span className="text-gray-300 text-sm">Positive Score</span>
                    </div>
                    <div className="text-2xl font-bold text-white">{currentAnalysis.positiveScore}</div>
                  </div>

                  <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20">
                    <div className="flex items-center gap-2 mb-2">
                      <ThumbsDown className="w-5 h-5 text-red-400" />
                      <span className="text-gray-300 text-sm">Negative Score</span>
                    </div>
                    <div className="text-2xl font-bold text-white">{currentAnalysis.negativeScore}</div>
                  </div>

                  <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20">
                    <div className="flex items-center gap-2 mb-2">
                      <TrendingUp className="w-5 h-5 text-blue-400" />
                      <span className="text-gray-300 text-sm">Polarity Score</span>
                    </div>
                    <div className="text-2xl font-bold text-white">{currentAnalysis.polarityScore}</div>
                  </div>

                  <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20">
                    <div className="flex items-center gap-2 mb-2">
                      <Sparkles className="w-5 h-5 text-purple-400" />
                      <span className="text-gray-300 text-sm">Dominant Emotion</span>
                    </div>
                    <div className="text-2xl font-bold text-white capitalize">{currentAnalysis.dominantEmotion}</div>
                  </div>
                </div>

                {/* Emotion Analysis */}
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                  <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20">
                    <h3 className="text-white font-semibold mb-4">Emotion Breakdown</h3>
                    <ResponsiveContainer width="100%" height={300}>
                      <RadarChart data={emotionData}>
                        <PolarGrid stroke="#ffffff30" />
                        <PolarAngleAxis dataKey="emotion" stroke="#ffffff80" tick={{ fill: '#fff', fontSize: 12 }} />
                        <PolarRadiusAxis stroke="#ffffff30" />
                        <Radar name="Intensity" dataKey="value" stroke="#3b82f6" fill="#3b82f6" fillOpacity={0.6} />
                        <Tooltip 
                          contentStyle={{ backgroundColor: '#1e1e1e', border: '1px solid #444', borderRadius: '8px' }}
                        />
                      </RadarChart>
                    </ResponsiveContainer>
                  </div>

                  <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20">
                    <h3 className="text-white font-semibold mb-4">Detected Emotions</h3>
                    <div className="space-y-3">
                      {Object.entries(currentAnalysis.emotions).map(([emotion, value]) => (
                        <div key={emotion}>
                          <div className="flex justify-between items-center mb-1">
                            <span className="text-white capitalize">{emotion}</span>
                            <span className="text-blue-300">{value}</span>
                          </div>
                          <div className="bg-white/10 rounded-full h-2 overflow-hidden">
                            <div 
                              className="bg-gradient-to-r from-blue-500 to-purple-500 h-full transition-all"
                              style={{ width: `${Math.min(100, value * 25)}%` }}
                            />
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>

                {/* Sentiment Scale */}
                <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20">
                  <h3 className="text-white font-semibold mb-4">Sentiment Scale</h3>
                  <div className="relative">
                    <div className="h-8 rounded-full bg-gradient-to-r from-red-500 via-yellow-500 to-green-500" />
                    <div 
                      className="absolute top-0 w-4 h-8 bg-white border-2 border-gray-800 rounded-full shadow-lg transition-all"
                      style={{ left: `calc(${currentAnalysis.polarityScore}% - 8px)` }}
                    />
                  </div>
                  <div className="flex justify-between mt-2 text-sm text-gray-300">
                    <span>Negative</span>
                    <span>Neutral</span>
                    <span>Positive</span>
                  </div>
                </div>
              </>
            )}
          </>
        ) : (
          <>
            {/* Aggregate Statistics */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
              <div className="bg-gradient-to-br from-green-500/20 to-green-600/20 backdrop-blur-lg rounded-xl p-6 border border-green-400/30">
                <div className="flex items-center gap-2 mb-2">
                  <Smile className="w-6 h-6 text-green-400" />
                  <span className="text-green-200 text-sm">Positive</span>
                </div>
                <div className="text-3xl font-bold text-white">{aggregateStats.positive}</div>
                <div className="text-sm text-green-200">{aggregateStats.positivePercentage}%</div>
              </div>

              <div className="bg-gradient-to-br from-red-500/20 to-red-600/20 backdrop-blur-lg rounded-xl p-6 border border-red-400/30">
                <div className="flex items-center gap-2 mb-2">
                  <Frown className="w-6 h-6 text-red-400" />
                  <span className="text-red-200 text-sm">Negative</span>
                </div>
                <div className="text-3xl font-bold text-white">{aggregateStats.negative}</div>
                <div className="text-sm text-red-200">{aggregateStats.negativePercentage}%</div>
              </div>

              <div className="bg-gradient-to-br from-yellow-500/20 to-yellow-600/20 backdrop-blur-lg rounded-xl p-6 border border-yellow-400/30">
                <div className="flex items-center gap-2 mb-2">
                  <Meh className="w-6 h-6 text-yellow-400" />
                  <span className="text-yellow-200 text-sm">Neutral</span>
                </div>
                <div className="text-3xl font-bold text-white">{aggregateStats.neutral}</div>
                <div className="text-sm text-yellow-200">{aggregateStats.neutralPercentage}%</div>
              </div>

              <div className="bg-gradient-to-br from-blue-500/20 to-blue-600/20 backdrop-blur-lg rounded-xl p-6 border border-blue-400/30">
                <div className="flex items-center gap-2 mb-2">
                  <Hash className="w-6 h-6 text-blue-400" />
                  <span className="text-blue-200 text-sm">Total Analyzed</span>
                </div>
                <div className="text-3xl font-bold text-white">{aggregateStats.total}</div>
                <div className="text-sm text-blue-200">texts</div>
              </div>
            </div>

            {/* Charts */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
              <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20">
                <h3 className="text-white font-semibold mb-4">Sentiment Distribution</h3>
                <ResponsiveContainer width="100%" height={300}>
                  <RPieChart>
                    <Pie
                      data={pieData}
                      cx="50%"
                      cy="50%"
                      labelLine={false}
                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                      outerRadius={100}
                      fill="#8884d8"
                      dataKey="value"
                    >
                      {pieData.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={entry.color} />
                      ))}
                    </Pie>
                    <Tooltip 
                      contentStyle={{ backgroundColor: '#1e1e1e', border: '1px solid #444', borderRadius: '8px' }}
                    />
                  </RPieChart>
                </ResponsiveContainer>
              </div>

              <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20">
                <h3 className="text-white font-semibold mb-4">Confidence Scores</h3>
                <ResponsiveContainer width="100%" height={300}>
                  <BarChart data={batchAnalysis.map((b, i) => ({ name: `Text ${i + 1}`, confidence: b.analysis.confidence }))}>
                    <CartesianGrid strokeDasharray="3 3" stroke="#ffffff20" />
                    <XAxis dataKey="name" stroke="#ffffff60" />
                    <YAxis stroke="#ffffff60" />
                    <Tooltip 
                      contentStyle={{ backgroundColor: '#1e1e1e', border: '1px solid #444', borderRadius: '8px' }}
                    />
                    <Bar dataKey="confidence" fill="#3b82f6" radius={[8, 8, 0, 0]} />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </div>

            {/* Individual Results */}
            <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20">
              <h3 className="text-white font-semibold mb-4">Individual Analysis Results</h3>
              <div className="space-y-4">
                {batchAnalysis.map((item) => (
                  <div key={item.id} className={`bg-gradient-to-r ${getSentimentColor(item.analysis.sentiment)} rounded-lg p-4 border`}>
                    <div className="flex items-start justify-between mb-2">
                      <div className="flex items-center gap-2">
                        {getSentimentIcon(item.analysis.sentiment)}
                        <span className="text-white font-semibold capitalize">{item.analysis.sentiment}</span>
                        <span className="text-sm text-gray-300">• {item.source}</span>
                      </div>
                      <span className="text-white font-bold">{item.analysis.confidence}%</span>
                    </div>
                    <p className="text-white/90 text-sm mb-2">{item.text}</p>
                    <div className="flex gap-4 text-xs text-gray-300">
                      <span>Polarity: {item.analysis.polarityScore}</span>
                      <span>Positive: {item.analysis.positiveScore}</span>
                      <span>Negative: {item.analysis.negativeScore}</span>
                      <span className="capitalize">Emotion: {item.analysis.dominantEmotion}</span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </>
        )}

        {/* Info Panel */}
        <div className="mt-6 bg-gradient-to-r from-blue-500/10 to-purple-500/10 backdrop-blur-lg rounded-xl p-6 border border-blue-400/30">
          <div className="flex items-start gap-3">
            <AlertCircle className="w-6 h-6 text-blue-400 flex-shrink-0 mt-1" />
            <div>
              <h3 className="text-lg font-semibold text-white mb-2">How It Works</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-200">
                <div>
                  <span className="text-blue-400 font-semibold">Lexicon-Based Analysis:</span> Uses sentiment dictionaries to identify positive and negative words with context-aware scoring including intensifiers and negations.
                </div>
                <div>
                  <span className="text-purple-400 font-semibold">Emotion Detection:</span> Identifies six core emotions (joy, anger, sadness, fear, surprise, trust) to provide deeper emotional insights beyond simple positive/negative classification.
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SentimentAnalysisTool;
