import React, { useState, useEffect } from 'react';
import { Plus, Trash2, Edit2, Check, X, Calendar, Clock, Tag, ChevronDown, ChevronUp, Filter, Search, CheckCircle2, Circle, AlertCircle } from 'lucide-react';

export default function TaskManagementApp() {
  const [tasks, setTasks] = useState([]);
  const [showAddTask, setShowAddTask] = useState(false);
  const [editingTask, setEditingTask] = useState(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [filterStatus, setFilterStatus] = useState('all');
  const [filterPriority, setFilterPriority] = useState('all');
  const [sortBy, setSortBy] = useState('deadline');

  const [newTask, setNewTask] = useState({
    title: '',
    description: '',
    deadline: '',
    priority: 'medium',
    category: 'work',
    status: 'todo',
  });

  useEffect(() => {
    const sampleTasks = [
      {
        id: 1,
        title: 'Complete project proposal',
        description: 'Write and submit the Q4 project proposal document',
        deadline: '2025-10-10',
        priority: 'high',
        category: 'work',
        status: 'inprogress',
        progress: 60,
        createdAt: new Date('2025-10-01'),
      },
      {
        id: 2,
        title: 'Team meeting preparation',
        description: 'Prepare slides and agenda for the weekly team sync',
        deadline: '2025-10-07',
        priority: 'medium',
        category: 'work',
        status: 'todo',
        progress: 0,
        createdAt: new Date('2025-10-02'),
      },
      {
        id: 3,
        title: 'Gym workout',
        description: 'Complete cardio and strength training routine',
        deadline: '2025-10-06',
        priority: 'low',
        category: 'personal',
        status: 'completed',
        progress: 100,
        createdAt: new Date('2025-09-30'),
      },
      {
        id: 4,
        title: 'Code review',
        description: 'Review pull requests from team members',
        deadline: '2025-10-08',
        priority: 'high',
        category: 'work',
        status: 'inprogress',
        progress: 40,
        createdAt: new Date('2025-10-03'),
      },
      {
        id: 5,
        title: 'Buy groceries',
        description: 'Get items for the week: milk, eggs, vegetables',
        deadline: '2025-10-06',
        priority: 'medium',
        category: 'personal',
        status: 'todo',
        progress: 0,
        createdAt: new Date('2025-10-04'),
      },
    ];
    setTasks(sampleTasks);
  }, []);

  const handleAddTask = () => {
    if (newTask.title.trim()) {
      const task = {
        id: Date.now(),
        ...newTask,
        progress: 0,
        createdAt: new Date(),
      };
      setTasks([...tasks, task]);
      setNewTask({
        title: '',
        description: '',
        deadline: '',
        priority: 'medium',
        category: 'work',
        status: 'todo',
      });
      setShowAddTask(false);
    }
  };

  const handleUpdateTask = () => {
    if (editingTask && editingTask.title.trim()) {
      setTasks(tasks.map(task => 
        task.id === editingTask.id ? editingTask : task
      ));
      setEditingTask(null);
    }
  };

  const handleDeleteTask = (id) => {
    setTasks(tasks.filter(task => task.id !== id));
  };

  const handleStatusChange = (id, newStatus) => {
    setTasks(tasks.map(task => {
      if (task.id === id) {
        const progress = newStatus === 'completed' ? 100 : newStatus === 'inprogress' ? task.progress : 0;
        return { ...task, status: newStatus, progress };
      }
      return task;
    }));
  };

  const handleProgressChange = (id, newProgress) => {
    setTasks(tasks.map(task => {
      if (task.id === id) {
        const status = newProgress === 100 ? 'completed' : newProgress > 0 ? 'inprogress' : 'todo';
        return { ...task, progress: newProgress, status };
      }
      return task;
    }));
  };

  const getDaysUntilDeadline = (deadline) => {
    const today = new Date();
    const deadlineDate = new Date(deadline);
    const diffTime = deadlineDate - today;
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return diffDays;
  };

  const getFilteredAndSortedTasks = () => {
    let filtered = tasks.filter(task => {
      const matchesSearch = task.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                          task.description.toLowerCase().includes(searchQuery.toLowerCase());
      const matchesStatus = filterStatus === 'all' || task.status === filterStatus;
      const matchesPriority = filterPriority === 'all' || task.priority === filterPriority;
      return matchesSearch && matchesStatus && matchesPriority;
    });

    filtered.sort((a, b) => {
      if (sortBy === 'deadline') {
        return new Date(a.deadline) - new Date(b.deadline);
      } else if (sortBy === 'priority') {
        const priorityOrder = { high: 0, medium: 1, low: 2 };
        return priorityOrder[a.priority] - priorityOrder[b.priority];
      } else if (sortBy === 'progress') {
        return b.progress - a.progress;
      }
      return 0;
    });

    return filtered;
  };

  const getStats = () => {
    return {
      total: tasks.length,
      completed: tasks.filter(t => t.status === 'completed').length,
      inProgress: tasks.filter(t => t.status === 'inprogress').length,
      todo: tasks.filter(t => t.status === 'todo').length,
    };
  };

  const stats = getStats();
  const filteredTasks = getFilteredAndSortedTasks();

  const priorityColors = {
    high: 'bg-red-500',
    medium: 'bg-yellow-500',
    low: 'bg-green-500',
  };

  const statusColors = {
    todo: 'bg-gray-500',
    inprogress: 'bg-blue-500',
    completed: 'bg-green-500',
  };

  const categoryColors = {
    work: 'bg-purple-500',
    personal: 'bg-pink-500',
    shopping: 'bg-orange-500',
    health: 'bg-teal-500',
  };

  const TaskCard = ({ task }) => {
    const daysUntil = getDaysUntilDeadline(task.deadline);
    const isOverdue = daysUntil < 0 && task.status !== 'completed';
    const isDueSoon = daysUntil <= 2 && daysUntil >= 0 && task.status !== 'completed';

    return (
      <div className="bg-white rounded-xl shadow-md hover:shadow-xl transition-all p-6 border-l-4 border-purple-500">
        <div className="flex items-start justify-between mb-3">
          <div className="flex-1">
            <div className="flex items-center gap-2 mb-2">
              <h3 className="text-xl font-bold text-gray-800">{task.title}</h3>
              <span className={`px-2 py-1 rounded-full text-xs font-semibold text-white ${categoryColors[task.category]}`}>
                {task.category}
              </span>
            </div>
            <p className="text-gray-600 text-sm mb-3">{task.description}</p>
          </div>
          <div className="flex gap-2">
            <button
              onClick={() => setEditingTask(task)}
              className="text-blue-500 hover:text-blue-700 transition-colors"
            >
              <Edit2 className="w-5 h-5" />
            </button>
            <button
              onClick={() => handleDeleteTask(task.id)}
              className="text-red-500 hover:text-red-700 transition-colors"
            >
              <Trash2 className="w-5 h-5" />
            </button>
          </div>
        </div>

        <div className="space-y-3">
          <div className="flex items-center gap-4 text-sm">
            <div className="flex items-center gap-1 text-gray-600">
              <Calendar className="w-4 h-4" />
              <span className={isOverdue ? 'text-red-600 font-semibold' : isDueSoon ? 'text-orange-600 font-semibold' : ''}>
                {new Date(task.deadline).toLocaleDateString()}
                {isOverdue && ' (Overdue)'}
                {isDueSoon && !isOverdue && ` (${daysUntil} days left)`}
              </span>
            </div>
            <div className={`px-2 py-1 rounded-full text-xs font-semibold text-white ${priorityColors[task.priority]}`}>
              {task.priority.toUpperCase()}
            </div>
          </div>

          <div>
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-gray-700">Progress: {task.progress}%</span>
              <select
                value={task.status}
                onChange={(e) => handleStatusChange(task.id, e.target.value)}
                className={`px-3 py-1 rounded-full text-xs font-semibold text-white ${statusColors[task.status]}`}
              >
                <option value="todo">To Do</option>
                <option value="inprogress">In Progress</option>
                <option value="completed">Completed</option>
              </select>
            </div>
            <div className="relative w-full h-2 bg-gray-200 rounded-full overflow-hidden">
              <div
                className="absolute top-0 left-0 h-full bg-gradient-to-r from-purple-500 to-pink-500 transition-all duration-300"
                style={{ width: `${task.progress}%` }}
              />
            </div>
            <input
              type="range"
              min="0"
              max="100"
              value={task.progress}
              onChange={(e) => handleProgressChange(task.id, parseInt(e.target.value))}
              className="w-full mt-2 cursor-pointer"
            />
          </div>
        </div>
      </div>
    );
  };

  const TaskForm = ({ task, onSave, onCancel }) => {
    const [formData, setFormData] = useState(task);

    return (
      <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-2xl shadow-2xl p-8 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
          <h2 className="text-2xl font-bold text-gray-800 mb-6">
            {task.id ? 'Edit Task' : 'Add New Task'}
          </h2>

          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Task Title</label>
              <input
                type="text"
                value={formData.title}
                onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                className="w-full px-4 py-2 border-2 border-gray-300 rounded-lg focus:border-purple-500 focus:outline-none"
                placeholder="Enter task title"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Description</label>
              <textarea
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                className="w-full px-4 py-2 border-2 border-gray-300 rounded-lg focus:border-purple-500 focus:outline-none h-24"
                placeholder="Enter task description"
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Deadline</label>
                <input
                  type="date"
                  value={formData.deadline}
                  onChange={(e) => setFormData({ ...formData, deadline: e.target.value })}
                  className="w-full px-4 py-2 border-2 border-gray-300 rounded-lg focus:border-purple-500 focus:outline-none"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Priority</label>
                <select
                  value={formData.priority}
                  onChange={(e) => setFormData({ ...formData, priority: e.target.value })}
                  className="w-full px-4 py-2 border-2 border-gray-300 rounded-lg focus:border-purple-500 focus:outline-none"
                >
                  <option value="low">Low</option>
                  <option value="medium">Medium</option>
                  <option value="high">High</option>
                </select>
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Category</label>
                <select
                  value={formData.category}
                  onChange={(e) => setFormData({ ...formData, category: e.target.value })}
                  className="w-full px-4 py-2 border-2 border-gray-300 rounded-lg focus:border-purple-500 focus:outline-none"
                >
                  <option value="work">Work</option>
                  <option value="personal">Personal</option>
                  <option value="shopping">Shopping</option>
                  <option value="health">Health</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Status</label>
                <select
                  value={formData.status}
                  onChange={(e) => setFormData({ ...formData, status: e.target.value })}
                  className="w-full px-4 py-2 border-2 border-gray-300 rounded-lg focus:border-purple-500 focus:outline-none"
                >
                  <option value="todo">To Do</option>
                  <option value="inprogress">In Progress</option>
                  <option value="completed">Completed</option>
                </select>
              </div>
            </div>
          </div>

          <div className="flex gap-3 mt-6">
            <button
              onClick={() => {
                if (task.id) {
                  setTasks(tasks.map(t => t.id === formData.id ? formData : t));
                  setEditingTask(null);
                } else {
                  handleAddTask();
                }
              }}
              className="flex-1 bg-gradient-to-r from-purple-600 to-pink-600 text-white py-3 rounded-lg font-semibold hover:from-purple-700 hover:to-pink-700 transition-all"
            >
              {task.id ? 'Update Task' : 'Add Task'}
            </button>
            <button
              onClick={onCancel}
              className="flex-1 bg-gray-300 text-gray-700 py-3 rounded-lg font-semibold hover:bg-gray-400 transition-all"
            >
              Cancel
            </button>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-100 via-pink-100 to-blue-100 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-4xl font-bold text-gray-800 mb-2">Task Manager</h1>
          <p className="text-gray-600">Organize your tasks, set deadlines, and track progress</p>
        </div>

        {/* Stats */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
          <div className="bg-white rounded-xl p-6 shadow-md">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-600 text-sm mb-1">Total Tasks</p>
                <p className="text-3xl font-bold text-gray-800">{stats.total}</p>
              </div>
              <CheckCircle2 className="w-10 h-10 text-purple-500" />
            </div>
          </div>
          <div className="bg-white rounded-xl p-6 shadow-md">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-600 text-sm mb-1">To Do</p>
                <p className="text-3xl font-bold text-gray-500">{stats.todo}</p>
              </div>
              <Circle className="w-10 h-10 text-gray-500" />
            </div>
          </div>
          <div className="bg-white rounded-xl p-6 shadow-md">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-600 text-sm mb-1">In Progress</p>
                <p className="text-3xl font-bold text-blue-500">{stats.inProgress}</p>
              </div>
              <Clock className="w-10 h-10 text-blue-500" />
            </div>
          </div>
          <div className="bg-white rounded-xl p-6 shadow-md">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-600 text-sm mb-1">Completed</p>
                <p className="text-3xl font-bold text-green-500">{stats.completed}</p>
              </div>
              <Check className="w-10 h-10 text-green-500" />
            </div>
          </div>
        </div>

        {/* Filters and Search */}
        <div className="bg-white rounded-xl shadow-md p-6 mb-6">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="md:col-span-2">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                <input
                  type="text"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  placeholder="Search tasks..."
                  className="w-full pl-10 pr-4 py-2 border-2 border-gray-300 rounded-lg focus:border-purple-500 focus:outline-none"
                />
              </div>
            </div>
            <select
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value)}
              className="px-4 py-2 border-2 border-gray-300 rounded-lg focus:border-purple-500 focus:outline-none"
            >
              <option value="all">All Status</option>
              <option value="todo">To Do</option>
              <option value="inprogress">In Progress</option>
              <option value="completed">Completed</option>
            </select>
            <select
              value={filterPriority}
              onChange={(e) => setFilterPriority(e.target.value)}
              className="px-4 py-2 border-2 border-gray-300 rounded-lg focus:border-purple-500 focus:outline-none"
            >
              <option value="all">All Priority</option>
              <option value="high">High</option>
              <option value="medium">Medium</option>
              <option value="low">Low</option>
            </select>
          </div>
          <div className="flex items-center gap-4 mt-4">
            <span className="text-sm font-medium text-gray-700">Sort by:</span>
            <button
              onClick={() => setSortBy('deadline')}
              className={`px-4 py-2 rounded-lg text-sm font-medium transition-all ${sortBy === 'deadline' ? 'bg-purple-500 text-white' : 'bg-gray-200 text-gray-700'}`}
            >
              Deadline
            </button>
            <button
              onClick={() => setSortBy('priority')}
              className={`px-4 py-2 rounded-lg text-sm font-medium transition-all ${sortBy === 'priority' ? 'bg-purple-500 text-white' : 'bg-gray-200 text-gray-700'}`}
            >
              Priority
            </button>
            <button
              onClick={() => setSortBy('progress')}
              className={`px-4 py-2 rounded-lg text-sm font-medium transition-all ${sortBy === 'progress' ? 'bg-purple-500 text-white' : 'bg-gray-200 text-gray-700'}`}
            >
              Progress
            </button>
          </div>
        </div>

        {/* Add Task Button */}
        <button
          onClick={() => setShowAddTask(true)}
          className="mb-6 flex items-center gap-2 bg-gradient-to-r from-purple-600 to-pink-600 text-white px-6 py-3 rounded-lg font-semibold hover:from-purple-700 hover:to-pink-700 transition-all shadow-lg hover:shadow-xl"
        >
          <Plus className="w-5 h-5" />
          Add New Task
        </button>

        {/* Tasks Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {filteredTasks.map(task => (
            <TaskCard key={task.id} task={task} />
          ))}
        </div>

        {filteredTasks.length === 0 && (
          <div className="text-center py-16 bg-white rounded-xl shadow-md">
            <AlertCircle className="w-16 h-16 text-gray-400 mx-auto mb-4" />
            <p className="text-xl text-gray-600">No tasks found</p>
            <p className="text-sm text-gray-500 mt-2">Try adjusting your filters or add a new task</p>
          </div>
        )}

        {/* Modals */}
        {showAddTask && (
          <TaskForm
            task={newTask}
            onSave={handleAddTask}
            onCancel={() => setShowAddTask(false)}
          />
        )}

        {editingTask && (
          <TaskForm
            task={editingTask}
            onSave={handleUpdateTask}
            onCancel={() => setEditingTask(null)}
          />
        )}
      </div>
    </div>
  );
}
