import React, { useState } from 'react';
import { Search, Plus, Edit2, Trash2, MessageCircle, Tag, Calendar, User, Eye } from 'lucide-react';

const BlogCMS = () => {
  const [view, setView] = useState('posts');
  const [posts, setPosts] = useState([
    {
      id: 1,
      title: 'Getting Started with React Hooks',
      content: 'React Hooks have revolutionized the way we write React components. In this comprehensive guide, we\'ll explore useState, useEffect, and custom hooks to build powerful applications.',
      author: 'John Doe',
      category: 'Technology',
      date: '2025-10-01',
      comments: [
        { id: 1, author: 'Jane Smith', content: 'Great article! Very helpful.', date: '2025-10-02' },
        { id: 2, author: 'Bob Wilson', content: 'Thanks for the detailed explanation.', date: '2025-10-02' }
      ],
      views: 245
    },
    {
      id: 2,
      title: 'The Art of Minimalist Design',
      content: 'Minimalism isn\'t just about using less; it\'s about using what\'s necessary to create maximum impact. Learn the principles of minimalist design and how to apply them.',
      author: 'Sarah Johnson',
      category: 'Design',
      date: '2025-09-28',
      comments: [
        { id: 1, author: 'Mike Brown', content: 'Beautiful examples!', date: '2025-09-29' }
      ],
      views: 189
    },
    {
      id: 3,
      title: 'Healthy Living: A Complete Guide',
      content: 'Discover the secrets to maintaining a healthy lifestyle through balanced nutrition, regular exercise, and mindful practices. Your journey to wellness starts here.',
      author: 'John Doe',
      category: 'Lifestyle',
      date: '2025-09-25',
      comments: [],
      views: 312
    }
  ]);

  const [categories, setCategories] = useState(['Technology', 'Design', 'Lifestyle', 'Business', 'Travel']);
  const [selectedPost, setSelectedPost] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterCategory, setFilterCategory] = useState('All');
  const [newComment, setNewComment] = useState('');
  const [commentAuthor, setCommentAuthor] = useState('');

  const [formData, setFormData] = useState({
    title: '',
    content: '',
    author: '',
    category: 'Technology'
  });

  const handleInputChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (isEditing) {
      setPosts(posts.map(post => 
        post.id === selectedPost.id 
          ? { ...post, ...formData }
          : post
      ));
      setIsEditing(false);
    } else {
      const newPost = {
        id: Date.now(),
        ...formData,
        date: new Date().toISOString().split('T')[0],
        comments: [],
        views: 0
      };
      setPosts([newPost, ...posts]);
    }
    setFormData({ title: '', content: '', author: '', category: 'Technology' });
    setView('posts');
  };

  const handleEdit = (post) => {
    setSelectedPost(post);
    setFormData({
      title: post.title,
      content: post.content,
      author: post.author,
      category: post.category
    });
    setIsEditing(true);
    setView('create');
  };

  const handleDelete = (id) => {
    if (window.confirm('Are you sure you want to delete this post?')) {
      setPosts(posts.filter(post => post.id !== id));
    }
  };

  const handleViewPost = (post) => {
    setSelectedPost(post);
    setPosts(posts.map(p => 
      p.id === post.id ? { ...p, views: p.views + 1 } : p
    ));
    setView('view');
  };

  const handleAddComment = () => {
    if (newComment.trim() && commentAuthor.trim()) {
      const comment = {
        id: Date.now(),
        author: commentAuthor,
        content: newComment,
        date: new Date().toISOString().split('T')[0]
      };
      setPosts(posts.map(post =>
        post.id === selectedPost.id
          ? { ...post, comments: [...post.comments, comment] }
          : post
      ));
      setNewComment('');
      setCommentAuthor('');
      setSelectedPost({ ...selectedPost, comments: [...selectedPost.comments, comment] });
    }
  };

  const handleDeleteComment = (postId, commentId) => {
    setPosts(posts.map(post =>
      post.id === postId
        ? { ...post, comments: post.comments.filter(c => c.id !== commentId) }
        : post
    ));
    if (selectedPost && selectedPost.id === postId) {
      setSelectedPost({
        ...selectedPost,
        comments: selectedPost.comments.filter(c => c.id !== commentId)
      });
    }
  };

  const filteredPosts = posts.filter(post => {
    const matchesSearch = post.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         post.content.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = filterCategory === 'All' || post.category === filterCategory;
    return matchesSearch && matchesCategory;
  });

  const getStats = () => {
    return {
      totalPosts: posts.length,
      totalComments: posts.reduce((acc, post) => acc + post.comments.length, 0),
      totalViews: posts.reduce((acc, post) => acc + post.views, 0),
      totalCategories: categories.length
    };
  };

  const stats = getStats();

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-blue-50">
      {/* Header */}
      <header className="bg-white shadow-md">
        <div className="max-w-7xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <h1 className="text-3xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
              BlogCMS
            </h1>
            <nav className="flex gap-4">
              <button
                onClick={() => setView('posts')}
                className={`px-4 py-2 rounded-lg font-medium transition ${
                  view === 'posts' ? 'bg-purple-600 text-white' : 'text-gray-600 hover:bg-gray-100'
                }`}
              >
                Posts
              </button>
              <button
                onClick={() => {
                  setView('create');
                  setIsEditing(false);
                  setFormData({ title: '', content: '', author: '', category: 'Technology' });
                }}
                className={`px-4 py-2 rounded-lg font-medium transition ${
                  view === 'create' ? 'bg-purple-600 text-white' : 'text-gray-600 hover:bg-gray-100'
                }`}
              >
                <Plus className="inline w-4 h-4 mr-1" />
                New Post
              </button>
              <button
                onClick={() => setView('categories')}
                className={`px-4 py-2 rounded-lg font-medium transition ${
                  view === 'categories' ? 'bg-purple-600 text-white' : 'text-gray-600 hover:bg-gray-100'
                }`}
              >
                Categories
              </button>
            </nav>
          </div>
        </div>
      </header>

      {/* Stats Dashboard */}
      <div className="max-w-7xl mx-auto px-4 py-6">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="bg-white rounded-xl p-6 shadow-md">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-500 text-sm">Total Posts</p>
                <p className="text-3xl font-bold text-purple-600">{stats.totalPosts}</p>
              </div>
              <div className="bg-purple-100 p-3 rounded-lg">
                <Edit2 className="w-6 h-6 text-purple-600" />
              </div>
            </div>
          </div>
          <div className="bg-white rounded-xl p-6 shadow-md">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-500 text-sm">Total Comments</p>
                <p className="text-3xl font-bold text-blue-600">{stats.totalComments}</p>
              </div>
              <div className="bg-blue-100 p-3 rounded-lg">
                <MessageCircle className="w-6 h-6 text-blue-600" />
              </div>
            </div>
          </div>
          <div className="bg-white rounded-xl p-6 shadow-md">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-500 text-sm">Total Views</p>
                <p className="text-3xl font-bold text-green-600">{stats.totalViews}</p>
              </div>
              <div className="bg-green-100 p-3 rounded-lg">
                <Eye className="w-6 h-6 text-green-600" />
              </div>
            </div>
          </div>
          <div className="bg-white rounded-xl p-6 shadow-md">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-500 text-sm">Categories</p>
                <p className="text-3xl font-bold text-orange-600">{stats.totalCategories}</p>
              </div>
              <div className="bg-orange-100 p-3 rounded-lg">
                <Tag className="w-6 h-6 text-orange-600" />
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 py-6">
        {/* Posts List View */}
        {view === 'posts' && (
          <div className="bg-white rounded-xl shadow-md p-6">
            <div className="mb-6">
              <div className="flex flex-col md:flex-row gap-4">
                <div className="flex-1 relative">
                  <Search className="absolute left-3 top-3 w-5 h-5 text-gray-400" />
                  <input
                    type="text"
                    placeholder="Search posts..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  />
                </div>
                <select
                  value={filterCategory}
                  onChange={(e) => setFilterCategory(e.target.value)}
                  className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                >
                  <option>All</option>
                  {categories.map(cat => (
                    <option key={cat}>{cat}</option>
                  ))}
                </select>
              </div>
            </div>

            <div className="space-y-4">
              {filteredPosts.map(post => (
                <div key={post.id} className="border border-gray-200 rounded-lg p-6 hover:shadow-lg transition">
                  <div className="flex justify-between items-start mb-3">
                    <div className="flex-1">
                      <h3 
                        className="text-xl font-bold text-gray-800 mb-2 cursor-pointer hover:text-purple-600"
                        onClick={() => handleViewPost(post)}
                      >
                        {post.title}
                      </h3>
                      <p className="text-gray-600 mb-3 line-clamp-2">{post.content}</p>
                    </div>
                  </div>
                  <div className="flex flex-wrap items-center gap-4 text-sm text-gray-500">
                    <span className="flex items-center gap-1">
                      <User className="w-4 h-4" />
                      {post.author}
                    </span>
                    <span className="flex items-center gap-1">
                      <Calendar className="w-4 h-4" />
                      {post.date}
                    </span>
                    <span className="flex items-center gap-1">
                      <Tag className="w-4 h-4" />
                      <span className="bg-purple-100 text-purple-600 px-2 py-1 rounded">{post.category}</span>
                    </span>
                    <span className="flex items-center gap-1">
                      <MessageCircle className="w-4 h-4" />
                      {post.comments.length}
                    </span>
                    <span className="flex items-center gap-1">
                      <Eye className="w-4 h-4" />
                      {post.views}
                    </span>
                  </div>
                  <div className="flex gap-2 mt-4 pt-4 border-t">
                    <button
                      onClick={() => handleViewPost(post)}
                      className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition"
                    >
                      View
                    </button>
                    <button
                      onClick={() => handleEdit(post)}
                      className="px-4 py-2 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 transition"
                    >
                      <Edit2 className="w-4 h-4 inline mr-1" />
                      Edit
                    </button>
                    <button
                      onClick={() => handleDelete(post.id)}
                      className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition"
                    >
                      <Trash2 className="w-4 h-4 inline mr-1" />
                      Delete
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Create/Edit Post View */}
        {view === 'create' && (
          <div className="bg-white rounded-xl shadow-md p-6">
            <h2 className="text-2xl font-bold mb-6 text-gray-800">
              {isEditing ? 'Edit Post' : 'Create New Post'}
            </h2>
            <form onSubmit={handleSubmit} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Title</label>
                <input
                  type="text"
                  name="title"
                  value={formData.title}
                  onChange={handleInputChange}
                  required
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  placeholder="Enter post title..."
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Content</label>
                <textarea
                  name="content"
                  value={formData.content}
                  onChange={handleInputChange}
                  required
                  rows="10"
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  placeholder="Write your post content..."
                />
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Author</label>
                  <input
                    type="text"
                    name="author"
                    value={formData.author}
                    onChange={handleInputChange}
                    required
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    placeholder="Author name..."
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Category</label>
                  <select
                    name="category"
                    value={formData.category}
                    onChange={handleInputChange}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  >
                    {categories.map(cat => (
                      <option key={cat} value={cat}>{cat}</option>
                    ))}
                  </select>
                </div>
              </div>
              <div className="flex gap-3 pt-4">
                <button
                  type="submit"
                  className="px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition font-medium"
                >
                  {isEditing ? 'Update Post' : 'Publish Post'}
                </button>
                <button
                  type="button"
                  onClick={() => {
                    setView('posts');
                    setIsEditing(false);
                    setFormData({ title: '', content: '', author: '', category: 'Technology' });
                  }}
                  className="px-6 py-3 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition font-medium"
                >
                  Cancel
                </button>
              </div>
            </form>
          </div>
        )}

        {/* View Post with Comments */}
        {view === 'view' && selectedPost && (
          <div className="bg-white rounded-xl shadow-md p-6">
            <button
              onClick={() => setView('posts')}
              className="mb-4 text-purple-600 hover:text-purple-700 font-medium"
            >
              ← Back to Posts
            </button>
            <article className="mb-8">
              <h1 className="text-4xl font-bold mb-4 text-gray-800">{selectedPost.title}</h1>
              <div className="flex flex-wrap items-center gap-4 mb-6 text-sm text-gray-500">
                <span className="flex items-center gap-1">
                  <User className="w-4 h-4" />
                  {selectedPost.author}
                </span>
                <span className="flex items-center gap-1">
                  <Calendar className="w-4 h-4" />
                  {selectedPost.date}
                </span>
                <span className="flex items-center gap-1">
                  <Tag className="w-4 h-4" />
                  <span className="bg-purple-100 text-purple-600 px-3 py-1 rounded">{selectedPost.category}</span>
                </span>
                <span className="flex items-center gap-1">
                  <Eye className="w-4 h-4" />
                  {selectedPost.views} views
                </span>
              </div>
              <div className="prose max-w-none text-gray-700 leading-relaxed">
                {selectedPost.content}
              </div>
            </article>

            {/* Comments Section */}
            <div className="border-t pt-8">
              <h3 className="text-2xl font-bold mb-6 text-gray-800 flex items-center gap-2">
                <MessageCircle className="w-6 h-6" />
                Comments ({selectedPost.comments.length})
              </h3>

              {/* Add Comment Form */}
              <div className="mb-8 bg-gray-50 p-6 rounded-lg">
                <h4 className="font-semibold mb-4 text-gray-800">Leave a Comment</h4>
                <input
                  type="text"
                  placeholder="Your name..."
                  value={commentAuthor}
                  onChange={(e) => setCommentAuthor(e.target.value)}
                  className="w-full px-4 py-2 mb-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                />
                <textarea
                  placeholder="Write your comment..."
                  value={newComment}
                  onChange={(e) => setNewComment(e.target.value)}
                  rows="3"
                  className="w-full px-4 py-2 mb-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                />
                <button
                  onClick={handleAddComment}
                  className="px-6 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition font-medium"
                >
                  Post Comment
                </button>
              </div>

              {/* Comments List */}
              <div className="space-y-4">
                {selectedPost.comments.length === 0 ? (
                  <p className="text-gray-500 text-center py-8">No comments yet. Be the first to comment!</p>
                ) : (
                  selectedPost.comments.map(comment => (
                    <div key={comment.id} className="bg-gray-50 p-4 rounded-lg">
                      <div className="flex justify-between items-start mb-2">
                        <div>
                          <p className="font-semibold text-gray-800">{comment.author}</p>
                          <p className="text-sm text-gray-500">{comment.date}</p>
                        </div>
                        <button
                          onClick={() => handleDeleteComment(selectedPost.id, comment.id)}
                          className="text-red-500 hover:text-red-700"
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                      <p className="text-gray-700">{comment.content}</p>
                    </div>
                  ))
                )}
              </div>
            </div>
          </div>
        )}

        {/* Categories Management */}
        {view === 'categories' && (
          <div className="bg-white rounded-xl shadow-md p-6">
            <h2 className="text-2xl font-bold mb-6 text-gray-800">Manage Categories</h2>
            <div className="mb-6">
              <div className="flex gap-3">
                <input
                  type="text"
                  placeholder="New category name..."
                  id="newCategory"
                  className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                />
                <button
                  onClick={() => {
                    const input = document.getElementById('newCategory');
                    if (input.value.trim() && !categories.includes(input.value.trim())) {
                      setCategories([...categories, input.value.trim()]);
                      input.value = '';
                    }
                  }}
                  className="px-6 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition font-medium"
                >
                  <Plus className="w-4 h-4 inline mr-1" />
                  Add
                </button>
              </div>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {categories.map((category, index) => (
                <div key={index} className="flex items-center justify-between p-4 bg-purple-50 rounded-lg">
                  <div className="flex items-center gap-2">
                    <Tag className="w-5 h-5 text-purple-600" />
                    <span className="font-medium text-gray-800">{category}</span>
                  </div>
                  <button
                    onClick={() => {
                      if (window.confirm(`Delete category "${category}"?`)) {
                        setCategories(categories.filter(c => c !== category));
                      }
                    }}
                    className="text-red-500 hover:text-red-700"
                  >
                    <Trash2 className="w-4 h-4" />
                  </button>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default BlogCMS;
