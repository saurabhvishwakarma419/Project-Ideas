import React, { useState } from 'react';
import { ShoppingCart, Search, Filter, Heart, Star, Minus, Plus, Trash2, CreditCard, MapPin, User, Mail, Phone, Package, ChevronRight, Home, Eye } from 'lucide-react';

const ECommerceStore = () => {
  const [products] = useState([
    {
      id: 1,
      name: 'Wireless Headphones',
      price: 89.99,
      category: 'Electronics',
      image: '🎧',
      rating: 4.5,
      reviews: 128,
      description: 'Premium wireless headphones with noise cancellation',
      stock: 15
    },
    {
      id: 2,
      name: 'Smart Watch',
      price: 299.99,
      category: 'Electronics',
      image: '⌚',
      rating: 4.8,
      reviews: 256,
      description: 'Advanced fitness tracking and notifications',
      stock: 8
    },
    {
      id: 3,
      name: 'Running Shoes',
      price: 129.99,
      category: 'Fashion',
      image: '👟',
      rating: 4.6,
      reviews: 189,
      description: 'Comfortable running shoes with excellent support',
      stock: 23
    },
    {
      id: 4,
      name: 'Leather Backpack',
      price: 79.99,
      category: 'Fashion',
      image: '🎒',
      rating: 4.4,
      reviews: 94,
      description: 'Premium leather backpack with laptop compartment',
      stock: 12
    },
    {
      id: 5,
      name: 'Coffee Maker',
      price: 149.99,
      category: 'Home',
      image: '☕',
      rating: 4.7,
      reviews: 312,
      description: 'Programmable coffee maker with thermal carafe',
      stock: 18
    },
    {
      id: 6,
      name: 'Yoga Mat',
      price: 34.99,
      category: 'Sports',
      image: '🧘',
      rating: 4.5,
      reviews: 167,
      description: 'Non-slip eco-friendly yoga mat',
      stock: 45
    },
    {
      id: 7,
      name: 'Bluetooth Speaker',
      price: 59.99,
      category: 'Electronics',
      image: '🔊',
      rating: 4.3,
      reviews: 203,
      description: 'Portable waterproof Bluetooth speaker',
      stock: 27
    },
    {
      id: 8,
      name: 'Sunglasses',
      price: 89.99,
      category: 'Fashion',
      image: '🕶️',
      rating: 4.6,
      reviews: 142,
      description: 'UV protection polarized sunglasses',
      stock: 31
    }
  ]);

  const [view, setView] = useState('products');
  const [cart, setCart] = useState([]);
  const [wishlist, setWishlist] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('All');
  const [sortBy, setSortBy] = useState('featured');
  const [selectedProduct, setSelectedProduct] = useState(null);
  
  const [checkoutData, setCheckoutData] = useState({
    fullName: '',
    email: '',
    phone: '',
    address: '',
    city: '',
    zipCode: '',
    cardNumber: '',
    cardName: '',
    expiryDate: '',
    cvv: ''
  });

  const categories = ['All', ...new Set(products.map(p => p.category))];

  const filteredProducts = products
    .filter(p => {
      const matchesSearch = p.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           p.description.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesCategory = selectedCategory === 'All' || p.category === selectedCategory;
      return matchesSearch && matchesCategory;
    })
    .sort((a, b) => {
      if (sortBy === 'price-low') return a.price - b.price;
      if (sortBy === 'price-high') return b.price - a.price;
      if (sortBy === 'rating') return b.rating - a.rating;
      return 0;
    });

  const addToCart = (product) => {
    const existing = cart.find(item => item.id === product.id);
    if (existing) {
      if (existing.quantity < product.stock) {
        setCart(cart.map(item =>
          item.id === product.id
            ? { ...item, quantity: item.quantity + 1 }
            : item
        ));
      } else {
        alert('Maximum stock reached!');
      }
    } else {
      setCart([...cart, { ...product, quantity: 1 }]);
    }
  };

  const updateQuantity = (productId, change) => {
    setCart(cart.map(item => {
      if (item.id === productId) {
        const newQuantity = item.quantity + change;
        if (newQuantity > 0 && newQuantity <= item.stock) {
          return { ...item, quantity: newQuantity };
        }
      }
      return item;
    }));
  };

  const removeFromCart = (productId) => {
    setCart(cart.filter(item => item.id !== productId));
  };

  const toggleWishlist = (product) => {
    if (wishlist.find(item => item.id === product.id)) {
      setWishlist(wishlist.filter(item => item.id !== product.id));
    } else {
      setWishlist([...wishlist, product]);
    }
  };

  const getCartTotal = () => {
    return cart.reduce((total, item) => total + (item.price * item.quantity), 0);
  };

  const getCartCount = () => {
    return cart.reduce((total, item) => total + item.quantity, 0);
  };

  const handleCheckoutInputChange = (e) => {
    setCheckoutData({ ...checkoutData, [e.target.name]: e.target.value });
  };

  const completeOrder = () => {
    if (!checkoutData.fullName || !checkoutData.email || !checkoutData.address || !checkoutData.cardNumber) {
      alert('Please fill in all required fields');
      return;
    }
    alert('Order placed successfully! Thank you for your purchase.');
    setCart([]);
    setCheckoutData({
      fullName: '', email: '', phone: '', address: '', city: '', zipCode: '',
      cardNumber: '', cardName: '', expiryDate: '', cvv: ''
    });
    setView('products');
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-md sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2 cursor-pointer" onClick={() => setView('products')}>
              <ShoppingCart className="w-8 h-8 text-blue-600" />
              <h1 className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                ShopHub
              </h1>
            </div>

            <div className="flex items-center gap-4">
              <button
                onClick={() => setView('wishlist')}
                className="relative p-2 text-gray-600 hover:text-red-500 transition"
              >
                <Heart className={wishlist.length > 0 ? 'fill-red-500 text-red-500' : ''} />
                {wishlist.length > 0 && (
                  <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                    {wishlist.length}
                  </span>
                )}
              </button>
              <button
                onClick={() => setView('cart')}
                className="relative p-2 text-gray-600 hover:text-blue-600 transition"
              >
                <ShoppingCart />
                {getCartCount() > 0 && (
                  <span className="absolute -top-1 -right-1 bg-blue-600 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                    {getCartCount()}
                  </span>
                )}
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* Products View */}
      {view === 'products' && (
        <div className="max-w-7xl mx-auto px-4 py-6">
          {/* Filters and Search */}
          <div className="bg-white rounded-lg shadow-md p-6 mb-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="relative">
                <Search className="absolute left-3 top-3 w-5 h-5 text-gray-400" />
                <input
                  type="text"
                  placeholder="Search products..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>
              <select
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
                className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                {categories.map(cat => (
                  <option key={cat} value={cat}>{cat}</option>
                ))}
              </select>
              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="featured">Featured</option>
                <option value="price-low">Price: Low to High</option>
                <option value="price-high">Price: High to Low</option>
                <option value="rating">Highest Rated</option>
              </select>
            </div>
          </div>

          {/* Product Grid */}
          <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-6">
            {filteredProducts.map(product => (
              <div key={product.id} className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-xl transition group">
                <div className="relative">
                  <div className="h-48 bg-gradient-to-br from-blue-100 to-purple-100 flex items-center justify-center text-6xl">
                    {product.image}
                  </div>
                  <button
                    onClick={() => toggleWishlist(product)}
                    className="absolute top-3 right-3 p-2 bg-white rounded-full shadow-md hover:scale-110 transition"
                  >
                    <Heart
                      className={`w-5 h-5 ${
                        wishlist.find(item => item.id === product.id)
                          ? 'fill-red-500 text-red-500'
                          : 'text-gray-400'
                      }`}
                    />
                  </button>
                  {product.stock < 10 && (
                    <span className="absolute top-3 left-3 bg-red-500 text-white px-2 py-1 rounded text-xs font-semibold">
                      Only {product.stock} left!
                    </span>
                  )}
                </div>
                <div className="p-4">
                  <span className="text-xs text-blue-600 font-semibold">{product.category}</span>
                  <h3 
                    className="font-bold text-gray-800 mt-1 mb-2 cursor-pointer hover:text-blue-600"
                    onClick={() => {
                      setSelectedProduct(product);
                      setView('detail');
                    }}
                  >
                    {product.name}
                  </h3>
                  <p className="text-sm text-gray-600 mb-3">{product.description}</p>
                  <div className="flex items-center gap-2 mb-3">
                    <div className="flex items-center">
                      {[...Array(5)].map((_, i) => (
                        <Star
                          key={i}
                          className={`w-4 h-4 ${
                            i < Math.floor(product.rating)
                              ? 'fill-yellow-400 text-yellow-400'
                              : 'text-gray-300'
                          }`}
                        />
                      ))}
                    </div>
                    <span className="text-xs text-gray-500">({product.reviews})</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-2xl font-bold text-gray-800">${product.price}</span>
                    <button
                      onClick={() => addToCart(product)}
                      className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition font-medium"
                    >
                      Add to Cart
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Product Detail View */}
      {view === 'detail' && selectedProduct && (
        <div className="max-w-7xl mx-auto px-4 py-6">
          <button
            onClick={() => setView('products')}
            className="mb-4 text-blue-600 hover:text-blue-700 font-medium flex items-center gap-1"
          >
            ← Back to Products
          </button>
          <div className="bg-white rounded-lg shadow-md p-8">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              <div className="h-96 bg-gradient-to-br from-blue-100 to-purple-100 rounded-lg flex items-center justify-center text-9xl">
                {selectedProduct.image}
              </div>
              <div>
                <span className="text-sm text-blue-600 font-semibold">{selectedProduct.category}</span>
                <h1 className="text-4xl font-bold text-gray-800 mt-2 mb-4">{selectedProduct.name}</h1>
                <div className="flex items-center gap-2 mb-4">
                  <div className="flex items-center">
                    {[...Array(5)].map((_, i) => (
                      <Star
                        key={i}
                        className={`w-5 h-5 ${
                          i < Math.floor(selectedProduct.rating)
                            ? 'fill-yellow-400 text-yellow-400'
                            : 'text-gray-300'
                        }`}
                      />
                    ))}
                  </div>
                  <span className="text-gray-600">
                    {selectedProduct.rating} ({selectedProduct.reviews} reviews)
                  </span>
                </div>
                <p className="text-gray-600 mb-6 leading-relaxed">{selectedProduct.description}</p>
                <div className="mb-6">
                  <span className="text-4xl font-bold text-gray-800">${selectedProduct.price}</span>
                </div>
                <div className="mb-6">
                  <span className="text-sm text-gray-600">
                    Stock: <span className={selectedProduct.stock < 10 ? 'text-red-500 font-semibold' : 'text-green-600'}>
                      {selectedProduct.stock} available
                    </span>
                  </span>
                </div>
                <div className="flex gap-4">
                  <button
                    onClick={() => {
                      addToCart(selectedProduct);
                      setView('cart');
                    }}
                    className="flex-1 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition font-medium"
                  >
                    Add to Cart
                  </button>
                  <button
                    onClick={() => toggleWishlist(selectedProduct)}
                    className="px-6 py-3 border-2 border-gray-300 rounded-lg hover:border-red-500 hover:text-red-500 transition"
                  >
                    <Heart
                      className={`w-6 h-6 ${
                        wishlist.find(item => item.id === selectedProduct.id)
                          ? 'fill-red-500 text-red-500'
                          : ''
                      }`}
                    />
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Wishlist View */}
      {view === 'wishlist' && (
        <div className="max-w-7xl mx-auto px-4 py-6">
          <h2 className="text-3xl font-bold mb-6 text-gray-800">My Wishlist</h2>
          {wishlist.length === 0 ? (
            <div className="bg-white rounded-lg shadow-md p-12 text-center">
              <Heart className="w-16 h-16 text-gray-300 mx-auto mb-4" />
              <p className="text-xl text-gray-600 mb-4">Your wishlist is empty</p>
              <button
                onClick={() => setView('products')}
                className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition font-medium"
              >
                Start Shopping
              </button>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-6">
              {wishlist.map(product => (
                <div key={product.id} className="bg-white rounded-lg shadow-md overflow-hidden">
                  <div className="h-48 bg-gradient-to-br from-blue-100 to-purple-100 flex items-center justify-center text-6xl">
                    {product.image}
                  </div>
                  <div className="p-4">
                    <h3 className="font-bold text-gray-800 mb-2">{product.name}</h3>
                    <p className="text-2xl font-bold text-gray-800 mb-3">${product.price}</p>
                    <div className="flex gap-2">
                      <button
                        onClick={() => addToCart(product)}
                        className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition text-sm font-medium"
                      >
                        Add to Cart
                      </button>
                      <button
                        onClick={() => toggleWishlist(product)}
                        className="px-4 py-2 border border-gray-300 rounded-lg hover:border-red-500 hover:text-red-500 transition"
                      >
                        <Trash2 className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      )}

      {/* Shopping Cart View */}
      {view === 'cart' && (
        <div className="max-w-7xl mx-auto px-4 py-6">
          <h2 className="text-3xl font-bold mb-6 text-gray-800">Shopping Cart</h2>
          {cart.length === 0 ? (
            <div className="bg-white rounded-lg shadow-md p-12 text-center">
              <ShoppingCart className="w-16 h-16 text-gray-300 mx-auto mb-4" />
              <p className="text-xl text-gray-600 mb-4">Your cart is empty</p>
              <button
                onClick={() => setView('products')}
                className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition font-medium"
              >
                Continue Shopping
              </button>
            </div>
          ) : (
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              <div className="lg:col-span-2 space-y-4">
                {cart.map(item => (
                  <div key={item.id} className="bg-white rounded-lg shadow-md p-6 flex gap-4">
                    <div className="w-24 h-24 bg-gradient-to-br from-blue-100 to-purple-100 rounded-lg flex items-center justify-center text-4xl flex-shrink-0">
                      {item.image}
                    </div>
                    <div className="flex-1">
                      <h3 className="font-bold text-gray-800 mb-1">{item.name}</h3>
                      <p className="text-sm text-gray-600 mb-2">{item.description}</p>
                      <p className="text-xl font-bold text-gray-800">${item.price}</p>
                    </div>
                    <div className="flex flex-col items-end justify-between">
                      <button
                        onClick={() => removeFromCart(item.id)}
                        className="text-red-500 hover:text-red-700"
                      >
                        <Trash2 className="w-5 h-5" />
                      </button>
                      <div className="flex items-center gap-2 border border-gray-300 rounded-lg">
                        <button
                          onClick={() => updateQuantity(item.id, -1)}
                          className="p-2 hover:bg-gray-100 transition"
                        >
                          <Minus className="w-4 h-4" />
                        </button>
                        <span className="w-8 text-center font-semibold">{item.quantity}</span>
                        <button
                          onClick={() => updateQuantity(item.id, 1)}
                          className="p-2 hover:bg-gray-100 transition"
                        >
                          <Plus className="w-4 h-4" />
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
              <div className="lg:col-span-1">
                <div className="bg-white rounded-lg shadow-md p-6 sticky top-24">
                  <h3 className="text-xl font-bold mb-4 text-gray-800">Order Summary</h3>
                  <div className="space-y-3 mb-4">
                    <div className="flex justify-between text-gray-600">
                      <span>Subtotal ({getCartCount()} items)</span>
                      <span>${getCartTotal().toFixed(2)}</span>
                    </div>
                    <div className="flex justify-between text-gray-600">
                      <span>Shipping</span>
                      <span>$10.00</span>
                    </div>
                    <div className="flex justify-between text-gray-600">
                      <span>Tax</span>
                      <span>${(getCartTotal() * 0.1).toFixed(2)}</span>
                    </div>
                    <div className="border-t pt-3 flex justify-between text-xl font-bold text-gray-800">
                      <span>Total</span>
                      <span>${(getCartTotal() + 10 + getCartTotal() * 0.1).toFixed(2)}</span>
                    </div>
                  </div>
                  <button
                    onClick={() => setView('checkout')}
                    className="w-full px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition font-medium"
                  >
                    Proceed to Checkout
                  </button>
                  <button
                    onClick={() => setView('products')}
                    className="w-full mt-3 px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition font-medium"
                  >
                    Continue Shopping
                  </button>
                </div>
              </div>
            </div>
          )}
        </div>
      )}

      {/* Checkout View */}
      {view === 'checkout' && (
        <div className="max-w-4xl mx-auto px-4 py-6">
          <h2 className="text-3xl font-bold mb-6 text-gray-800">Checkout</h2>
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="lg:col-span-2 space-y-6">
              {/* Shipping Information */}
              <div className="bg-white rounded-lg shadow-md p-6">
                <h3 className="text-xl font-bold mb-4 flex items-center gap-2 text-gray-800">
                  <MapPin className="w-5 h-5" />
                  Shipping Information
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="md:col-span-2">
                    <label className="block text-sm font-medium text-gray-700 mb-1">Full Name *</label>
                    <input
                      type="text"
                      name="fullName"
                      value={checkoutData.fullName}
                      onChange={handleCheckoutInputChange}
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="John Doe"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Email *</label>
                    <input
                      type="email"
                      name="email"
                      value={checkoutData.email}
                      onChange={handleCheckoutInputChange}
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="john@example.com"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Phone</label>
                    <input
                      type="tel"
                      name="phone"
                      value={checkoutData.phone}
                      onChange={handleCheckoutInputChange}
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="+1 (555) 000-0000"
                    />
                  </div>
                  <div className="md:col-span-2">
                    <label className="block text-sm font-medium text-gray-700 mb-1">Address *</label>
                    <input
                      type="text"
                      name="address"
                      value={checkoutData.address}
                      onChange={handleCheckoutInputChange}
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="123 Main Street"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">City</label>
                    <input
                      type="text"
                      name="city"
                      value={checkoutData.city}
                      onChange={handleCheckoutInputChange}
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="New York"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">ZIP Code</label>
                    <input
                      type="text"
                      name="zipCode"
                      value={checkoutData.zipCode}
                      onChange={handleCheckoutInputChange}
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="10001"
                    />
                  </div>
                </div>
              </div>

              {/* Payment Information */}
              <div className="bg-white rounded-lg shadow-md p-6">
                <h3 className="text-xl font-bold mb-4 flex items-center gap-2 text-gray-800">
                  <CreditCard className="w-5 h-5" />
                  Payment Information
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="md:col-span-2">
                    <label className="block text-sm font-medium text-gray-700 mb-1">Card Number *</label>
                    <input
                      type="text"
                      name="cardNumber"
                      value={checkoutData.cardNumber}
                      onChange={handleCheckoutInputChange}
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="1234 5678 9012 3456"
                      maxLength="19"
                    />
                  </div>
                  <div className="md:col-span-2">
                    <label className="block text-sm font-medium text-gray-700 mb-1">Cardholder Name</label>
                    <input
                      type="text"
                      name="cardName"
                      value={checkoutData.cardName}
                      onChange={handleCheckoutInputChange}
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="John Doe"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Expiry Date</label>
                    <input
