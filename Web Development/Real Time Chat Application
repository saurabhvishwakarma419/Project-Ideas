
import React, { useState, useEffect, useRef } from 'react';
import { Send, Users, LogOut, MessageCircle } from 'lucide-react';

export default function ChatApp() {
  const [currentUser, setCurrentUser] = useState(null);
  const [username, setUsername] = useState('');
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [onlineUsers, setOnlineUsers] = useState([]);
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef(null);
  const typingTimeoutRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    if (currentUser) {
      setOnlineUsers(prev => [...new Set([...prev, currentUser])]);
      
      const interval = setInterval(() => {
        if (Math.random() > 0.7) {
          const otherUsers = ['Alice', 'Bob', 'Charlie', 'Diana'];
          const randomUser = otherUsers[Math.floor(Math.random() * otherUsers.length)];
          const randomMessages = [
            'Hey everyone!',
            'How are you doing?',
            'Anyone here?',
            'Great weather today!',
            'Working on something interesting',
          ];
          
          if (randomUser !== currentUser) {
            const msg = {
              id: Date.now(),
              user: randomUser,
              text: randomMessages[Math.floor(Math.random() * randomMessages.length)],
              timestamp: new Date(),
            };
            setMessages(prev => [...prev, msg]);
            setOnlineUsers(prev => [...new Set([...prev, randomUser])]);
          }
        }
      }, 8000);

      return () => clearInterval(interval);
    }
  }, [currentUser]);

  const handleLogin = () => {
    if (username.trim()) {
      setCurrentUser(username.trim());
      setMessages([{
        id: Date.now(),
        user: 'System',
        text: `Welcome ${username.trim()} to the chat!`,
        timestamp: new Date(),
        isSystem: true,
      }]);
    }
  };

  const handleLoginKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleLogin();
    }
  };

  const handleLogout = () => {
    setOnlineUsers(prev => prev.filter(u => u !== currentUser));
    setCurrentUser(null);
    setUsername('');
    setMessages([]);
  };

  const handleSendMessage = () => {
    if (newMessage.trim() && currentUser) {
      const msg = {
        id: Date.now(),
        user: currentUser,
        text: newMessage.trim(),
        timestamp: new Date(),
      };
      setMessages(prev => [...prev, msg]);
      setNewMessage('');
      setIsTyping(false);
      
      if (typingTimeoutRef.current) {
        clearTimeout(typingTimeoutRef.current);
      }
    }
  };

  const handleMessageKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleTyping = (e) => {
    setNewMessage(e.target.value);
    
    if (!isTyping && e.target.value) {
      setIsTyping(true);
    }
    
    if (typingTimeoutRef.current) {
      clearTimeout(typingTimeoutRef.current);
    }
    
    typingTimeoutRef.current = setTimeout(() => {
      setIsTyping(false);
    }, 1000);
  };

  const formatTime = (date) => {
    return date.toLocaleTimeString('en-US', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  if (!currentUser) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-500 via-purple-500 to-pink-500 flex items-center justify-center p-4">
        <div className="bg-white rounded-2xl shadow-2xl p-8 w-full max-w-md">
          <div className="text-center mb-8">
            <MessageCircle className="w-16 h-16 mx-auto text-purple-600 mb-4" />
            <h1 className="text-3xl font-bold text-gray-800 mb-2">Welcome to ChatRoom</h1>
            <p className="text-gray-600">Enter your name to join the conversation</p>
          </div>
          
          <div className="space-y-4">
            <input
              type="text"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              onKeyPress={handleLoginKeyPress}
              placeholder="Enter your username"
              className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:border-purple-500 focus:outline-none transition-colors"
              autoFocus
            />
            <button
              onClick={handleLogin}
              className="w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white py-3 rounded-lg font-semibold hover:from-purple-700 hover:to-pink-700 transition-all transform hover:scale-105"
            >
              Join Chat
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-500 via-purple-500 to-pink-500 p-4">
      <div className="max-w-6xl mx-auto h-[calc(100vh-2rem)] bg-white rounded-2xl shadow-2xl overflow-hidden flex">
        <div className="w-64 bg-gray-900 text-white p-4 flex flex-col">
          <div className="mb-6">
            <h2 className="text-xl font-bold flex items-center gap-2 mb-2">
              <MessageCircle className="w-6 h-6" />
              ChatRoom
            </h2>
            <div className="text-sm text-gray-400">
              Logged in as <span className="text-purple-400 font-semibold">{currentUser}</span>
            </div>
          </div>
          
          <div className="flex-1 overflow-y-auto">
            <div className="mb-4">
              <h3 className="text-sm font-semibold text-gray-400 uppercase mb-2 flex items-center gap-2">
                <Users className="w-4 h-4" />
                Online ({onlineUsers.length})
              </h3>
              <div className="space-y-2">
                {onlineUsers.map((user, idx) => (
                  <div key={idx} className="flex items-center gap-2 text-sm">
                    <div className="w-2 h-2 bg-green-400 rounded-full"></div>
                    <span className={user === currentUser ? 'text-purple-400 font-semibold' : ''}>
                      {user}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          </div>
          
          <button
            onClick={handleLogout}
            className="mt-4 flex items-center gap-2 text-red-400 hover:text-red-300 transition-colors"
          >
            <LogOut className="w-4 h-4" />
            Logout
          </button>
        </div>

        <div className="flex-1 flex flex-col">
          <div className="bg-gradient-to-r from-purple-600 to-pink-600 text-white p-4 shadow-lg">
            <h2 className="text-xl font-bold">General Chat</h2>
            <p className="text-sm text-purple-100">Everyone can see your messages</p>
          </div>

          <div className="flex-1 overflow-y-auto p-6 space-y-4 bg-gray-50">
            {messages.map((msg) => (
              <div
                key={msg.id}
                className={`flex ${msg.user === currentUser ? 'justify-end' : 'justify-start'}`}
              >
                <div className={`max-w-xs lg:max-w-md ${
                  msg.isSystem 
                    ? 'w-full text-center' 
                    : msg.user === currentUser 
                      ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white' 
                      : 'bg-white'
                } rounded-2xl shadow-md p-4`}>
                  {msg.isSystem ? (
                    <p className="text-sm text-gray-500 italic">{msg.text}</p>
                  ) : (
                    <>
                      <div className="flex items-center justify-between mb-1">
                        <span className={`text-xs font-semibold ${
                          msg.user === currentUser ? 'text-purple-200' : 'text-purple-600'
                        }`}>
                          {msg.user}
                        </span>
                        <span className={`text-xs ${
                          msg.user === currentUser ? 'text-purple-200' : 'text-gray-400'
                        }`}>
                          {formatTime(msg.timestamp)}
                        </span>
                      </div>
                      <p className={msg.user === currentUser ? 'text-white' : 'text-gray-800'}>
                        {msg.text}
                      </p>
                    </>
                  )}
                </div>
              </div>
            ))}
            
            {isTyping && (
              <div className="flex justify-start">
                <div className="bg-white rounded-2xl shadow-md p-4 max-w-xs">
                  <div className="flex gap-1">
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full" style={{ animation: 'bounce 1s infinite', animationDelay: '0.2s' }}></div>
                  </div>
                </div>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>

          <div className="p-4 bg-white border-t border-gray-200">
            <div className="flex gap-2">
              <input
                type="text"
                value={newMessage}
                onChange={handleTyping}
                onKeyPress={handleMessageKeyPress}
                placeholder="Type your message..."
                className="flex-1 px-4 py-3 border-2 border-gray-300 rounded-full focus:border-purple-500 focus:outline-none transition-colors"
              />
              <button
                onClick={handleSendMessage}
                disabled={!newMessage.trim()}
                className="bg-gradient-to-r from-purple-600 to-pink-600 text-white p-3 rounded-full hover:from-purple-700 hover:to-pink-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all transform hover:scale-110"
              >
                <Send className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
